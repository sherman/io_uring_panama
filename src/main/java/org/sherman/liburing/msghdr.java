// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct msghdr {
 *     void* msg_name;
 *     socklen_t msg_namelen;
 *     struct iovec* msg_iov;
 *     size_t msg_iovlen;
 *     void* msg_control;
 *     size_t msg_controllen;
 *     int msg_flags;
 * };
 * }
 */
public class msghdr {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("msg_name"),
        Constants$root.C_INT$LAYOUT.withName("msg_namelen"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("msg_iov"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("msg_iovlen"),
        Constants$root.C_POINTER$LAYOUT.withName("msg_control"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("msg_controllen"),
        Constants$root.C_INT$LAYOUT.withName("msg_flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("msghdr");
    public static MemoryLayout $LAYOUT() {
        return msghdr.$struct$LAYOUT;
    }
    static final VarHandle msg_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_name"));
    public static VarHandle msg_name$VH() {
        return msghdr.msg_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* msg_name;
     * }
     */
    public static MemorySegment msg_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)msghdr.msg_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* msg_name;
     * }
     */
    public static void msg_name$set(MemorySegment seg, MemorySegment x) {
        msghdr.msg_name$VH.set(seg, x);
    }
    public static MemorySegment msg_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)msghdr.msg_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_name$set(MemorySegment seg, long index, MemorySegment x) {
        msghdr.msg_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle msg_namelen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_namelen"));
    public static VarHandle msg_namelen$VH() {
        return msghdr.msg_namelen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * socklen_t msg_namelen;
     * }
     */
    public static int msg_namelen$get(MemorySegment seg) {
        return (int)msghdr.msg_namelen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * socklen_t msg_namelen;
     * }
     */
    public static void msg_namelen$set(MemorySegment seg, int x) {
        msghdr.msg_namelen$VH.set(seg, x);
    }
    public static int msg_namelen$get(MemorySegment seg, long index) {
        return (int)msghdr.msg_namelen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_namelen$set(MemorySegment seg, long index, int x) {
        msghdr.msg_namelen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle msg_iov$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_iov"));
    public static VarHandle msg_iov$VH() {
        return msghdr.msg_iov$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct iovec* msg_iov;
     * }
     */
    public static MemorySegment msg_iov$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)msghdr.msg_iov$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct iovec* msg_iov;
     * }
     */
    public static void msg_iov$set(MemorySegment seg, MemorySegment x) {
        msghdr.msg_iov$VH.set(seg, x);
    }
    public static MemorySegment msg_iov$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)msghdr.msg_iov$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_iov$set(MemorySegment seg, long index, MemorySegment x) {
        msghdr.msg_iov$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle msg_iovlen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_iovlen"));
    public static VarHandle msg_iovlen$VH() {
        return msghdr.msg_iovlen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t msg_iovlen;
     * }
     */
    public static long msg_iovlen$get(MemorySegment seg) {
        return (long)msghdr.msg_iovlen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t msg_iovlen;
     * }
     */
    public static void msg_iovlen$set(MemorySegment seg, long x) {
        msghdr.msg_iovlen$VH.set(seg, x);
    }
    public static long msg_iovlen$get(MemorySegment seg, long index) {
        return (long)msghdr.msg_iovlen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_iovlen$set(MemorySegment seg, long index, long x) {
        msghdr.msg_iovlen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle msg_control$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_control"));
    public static VarHandle msg_control$VH() {
        return msghdr.msg_control$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* msg_control;
     * }
     */
    public static MemorySegment msg_control$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)msghdr.msg_control$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* msg_control;
     * }
     */
    public static void msg_control$set(MemorySegment seg, MemorySegment x) {
        msghdr.msg_control$VH.set(seg, x);
    }
    public static MemorySegment msg_control$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)msghdr.msg_control$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_control$set(MemorySegment seg, long index, MemorySegment x) {
        msghdr.msg_control$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle msg_controllen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_controllen"));
    public static VarHandle msg_controllen$VH() {
        return msghdr.msg_controllen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t msg_controllen;
     * }
     */
    public static long msg_controllen$get(MemorySegment seg) {
        return (long)msghdr.msg_controllen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t msg_controllen;
     * }
     */
    public static void msg_controllen$set(MemorySegment seg, long x) {
        msghdr.msg_controllen$VH.set(seg, x);
    }
    public static long msg_controllen$get(MemorySegment seg, long index) {
        return (long)msghdr.msg_controllen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_controllen$set(MemorySegment seg, long index, long x) {
        msghdr.msg_controllen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle msg_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_flags"));
    public static VarHandle msg_flags$VH() {
        return msghdr.msg_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int msg_flags;
     * }
     */
    public static int msg_flags$get(MemorySegment seg) {
        return (int)msghdr.msg_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int msg_flags;
     * }
     */
    public static void msg_flags$set(MemorySegment seg, int x) {
        msghdr.msg_flags$VH.set(seg, x);
    }
    public static int msg_flags$get(MemorySegment seg, long index) {
        return (int)msghdr.msg_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_flags$set(MemorySegment seg, long index, int x) {
        msghdr.msg_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


