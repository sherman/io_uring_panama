// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct file_handle {
 *     unsigned int handle_bytes;
 *     int handle_type;
 *     unsigned char f_handle[0];
 * };
 * }
 */
public class file_handle {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("handle_bytes"),
        Constants$root.C_INT$LAYOUT.withName("handle_type"),
        MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("f_handle")
    ).withName("file_handle");
    public static MemoryLayout $LAYOUT() {
        return file_handle.$struct$LAYOUT;
    }
    static final VarHandle handle_bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("handle_bytes"));
    public static VarHandle handle_bytes$VH() {
        return file_handle.handle_bytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int handle_bytes;
     * }
     */
    public static int handle_bytes$get(MemorySegment seg) {
        return (int)file_handle.handle_bytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int handle_bytes;
     * }
     */
    public static void handle_bytes$set(MemorySegment seg, int x) {
        file_handle.handle_bytes$VH.set(seg, x);
    }
    public static int handle_bytes$get(MemorySegment seg, long index) {
        return (int)file_handle.handle_bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_bytes$set(MemorySegment seg, long index, int x) {
        file_handle.handle_bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle handle_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("handle_type"));
    public static VarHandle handle_type$VH() {
        return file_handle.handle_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int handle_type;
     * }
     */
    public static int handle_type$get(MemorySegment seg) {
        return (int)file_handle.handle_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int handle_type;
     * }
     */
    public static void handle_type$set(MemorySegment seg, int x) {
        file_handle.handle_type$VH.set(seg, x);
    }
    public static int handle_type$get(MemorySegment seg, long index) {
        return (int)file_handle.handle_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_type$set(MemorySegment seg, long index, int x) {
        file_handle.handle_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


