// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$57 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$57() {}
    static final FunctionDescriptor sched_getaffinity$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sched_getaffinity$MH = RuntimeHelper.downcallHandle(
        "sched_getaffinity",
        constants$57.sched_getaffinity$FUNC
    );
    static final FunctionDescriptor atomic_thread_fence$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle atomic_thread_fence$MH = RuntimeHelper.downcallHandle(
        "atomic_thread_fence",
        constants$57.atomic_thread_fence$FUNC
    );
    static final FunctionDescriptor atomic_signal_fence$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle atomic_signal_fence$MH = RuntimeHelper.downcallHandle(
        "atomic_signal_fence",
        constants$57.atomic_signal_fence$FUNC
    );
    static final FunctionDescriptor atomic_flag_test_and_set$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle atomic_flag_test_and_set$MH = RuntimeHelper.downcallHandle(
        "atomic_flag_test_and_set",
        constants$57.atomic_flag_test_and_set$FUNC
    );
    static final FunctionDescriptor atomic_flag_test_and_set_explicit$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle atomic_flag_test_and_set_explicit$MH = RuntimeHelper.downcallHandle(
        "atomic_flag_test_and_set_explicit",
        constants$57.atomic_flag_test_and_set_explicit$FUNC
    );
    static final FunctionDescriptor atomic_flag_clear$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle atomic_flag_clear$MH = RuntimeHelper.downcallHandle(
        "atomic_flag_clear",
        constants$57.atomic_flag_clear$FUNC
    );
}


