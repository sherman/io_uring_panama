// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*clone$__fn)(void*);
 * }
 */
public interface clone$__fn {

    int apply(java.lang.foreign.MemorySegment _x0);
    static MemorySegment allocate(clone$__fn fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$53.clone$__fn_UP$MH, fi, constants$53.clone$__fn$FUNC, scope);
    }
    static clone$__fn ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment __x0) -> {
            try {
                return (int)constants$54.clone$__fn_DOWN$MH.invokeExact(symbol, __x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


