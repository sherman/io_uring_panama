// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct io_cqring_offsets {
 *     __u32 head;
 *     __u32 tail;
 *     __u32 ring_mask;
 *     __u32 ring_entries;
 *     __u32 overflow;
 *     __u32 cqes;
 *     __u32 flags;
 *     __u32 resv1;
 *     __u64 resv2;
 * };
 * }
 */
public class io_cqring_offsets {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("head"),
        Constants$root.C_INT$LAYOUT.withName("tail"),
        Constants$root.C_INT$LAYOUT.withName("ring_mask"),
        Constants$root.C_INT$LAYOUT.withName("ring_entries"),
        Constants$root.C_INT$LAYOUT.withName("overflow"),
        Constants$root.C_INT$LAYOUT.withName("cqes"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        Constants$root.C_INT$LAYOUT.withName("resv1"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("resv2")
    ).withName("io_cqring_offsets");
    public static MemoryLayout $LAYOUT() {
        return io_cqring_offsets.$struct$LAYOUT;
    }
    static final VarHandle head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("head"));
    public static VarHandle head$VH() {
        return io_cqring_offsets.head$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 head;
     * }
     */
    public static int head$get(MemorySegment seg) {
        return (int)io_cqring_offsets.head$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 head;
     * }
     */
    public static void head$set(MemorySegment seg, int x) {
        io_cqring_offsets.head$VH.set(seg, x);
    }
    public static int head$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void head$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tail"));
    public static VarHandle tail$VH() {
        return io_cqring_offsets.tail$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 tail;
     * }
     */
    public static int tail$get(MemorySegment seg) {
        return (int)io_cqring_offsets.tail$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 tail;
     * }
     */
    public static void tail$set(MemorySegment seg, int x) {
        io_cqring_offsets.tail$VH.set(seg, x);
    }
    public static int tail$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.tail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tail$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.tail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ring_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ring_mask"));
    public static VarHandle ring_mask$VH() {
        return io_cqring_offsets.ring_mask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 ring_mask;
     * }
     */
    public static int ring_mask$get(MemorySegment seg) {
        return (int)io_cqring_offsets.ring_mask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 ring_mask;
     * }
     */
    public static void ring_mask$set(MemorySegment seg, int x) {
        io_cqring_offsets.ring_mask$VH.set(seg, x);
    }
    public static int ring_mask$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.ring_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ring_mask$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.ring_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ring_entries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ring_entries"));
    public static VarHandle ring_entries$VH() {
        return io_cqring_offsets.ring_entries$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 ring_entries;
     * }
     */
    public static int ring_entries$get(MemorySegment seg) {
        return (int)io_cqring_offsets.ring_entries$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 ring_entries;
     * }
     */
    public static void ring_entries$set(MemorySegment seg, int x) {
        io_cqring_offsets.ring_entries$VH.set(seg, x);
    }
    public static int ring_entries$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.ring_entries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ring_entries$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.ring_entries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle overflow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("overflow"));
    public static VarHandle overflow$VH() {
        return io_cqring_offsets.overflow$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 overflow;
     * }
     */
    public static int overflow$get(MemorySegment seg) {
        return (int)io_cqring_offsets.overflow$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 overflow;
     * }
     */
    public static void overflow$set(MemorySegment seg, int x) {
        io_cqring_offsets.overflow$VH.set(seg, x);
    }
    public static int overflow$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.overflow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void overflow$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.overflow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cqes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cqes"));
    public static VarHandle cqes$VH() {
        return io_cqring_offsets.cqes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 cqes;
     * }
     */
    public static int cqes$get(MemorySegment seg) {
        return (int)io_cqring_offsets.cqes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 cqes;
     * }
     */
    public static void cqes$set(MemorySegment seg, int x) {
        io_cqring_offsets.cqes$VH.set(seg, x);
    }
    public static int cqes$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.cqes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cqes$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.cqes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return io_cqring_offsets.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)io_cqring_offsets.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        io_cqring_offsets.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resv1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resv1"));
    public static VarHandle resv1$VH() {
        return io_cqring_offsets.resv1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 resv1;
     * }
     */
    public static int resv1$get(MemorySegment seg) {
        return (int)io_cqring_offsets.resv1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 resv1;
     * }
     */
    public static void resv1$set(MemorySegment seg, int x) {
        io_cqring_offsets.resv1$VH.set(seg, x);
    }
    public static int resv1$get(MemorySegment seg, long index) {
        return (int)io_cqring_offsets.resv1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resv1$set(MemorySegment seg, long index, int x) {
        io_cqring_offsets.resv1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resv2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resv2"));
    public static VarHandle resv2$VH() {
        return io_cqring_offsets.resv2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 resv2;
     * }
     */
    public static long resv2$get(MemorySegment seg) {
        return (long)io_cqring_offsets.resv2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 resv2;
     * }
     */
    public static void resv2$set(MemorySegment seg, long x) {
        io_cqring_offsets.resv2$VH.set(seg, x);
    }
    public static long resv2$get(MemorySegment seg, long index) {
        return (long)io_cqring_offsets.resv2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resv2$set(MemorySegment seg, long index, long x) {
        io_cqring_offsets.resv2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


