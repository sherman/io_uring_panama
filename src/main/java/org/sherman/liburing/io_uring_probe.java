// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct io_uring_probe {
 *     __u8 last_op;
 *     __u8 ops_len;
 *     __u16 resv;
 *     __u32 resv2[3];
 *     struct io_uring_probe_op ops[];
 * };
 * }
 */
public class io_uring_probe {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("last_op"),
        Constants$root.C_CHAR$LAYOUT.withName("ops_len"),
        Constants$root.C_SHORT$LAYOUT.withName("resv"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_INT$LAYOUT).withName("resv2"),
        MemoryLayout.sequenceLayout(0, MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("op"),
            Constants$root.C_CHAR$LAYOUT.withName("resv"),
            Constants$root.C_SHORT$LAYOUT.withName("flags"),
            Constants$root.C_INT$LAYOUT.withName("resv2")
        ).withName("io_uring_probe_op")).withName("ops")
    ).withName("io_uring_probe");
    public static MemoryLayout $LAYOUT() {
        return io_uring_probe.$struct$LAYOUT;
    }
    static final VarHandle last_op$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("last_op"));
    public static VarHandle last_op$VH() {
        return io_uring_probe.last_op$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 last_op;
     * }
     */
    public static byte last_op$get(MemorySegment seg) {
        return (byte)io_uring_probe.last_op$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 last_op;
     * }
     */
    public static void last_op$set(MemorySegment seg, byte x) {
        io_uring_probe.last_op$VH.set(seg, x);
    }
    public static byte last_op$get(MemorySegment seg, long index) {
        return (byte)io_uring_probe.last_op$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void last_op$set(MemorySegment seg, long index, byte x) {
        io_uring_probe.last_op$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ops_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ops_len"));
    public static VarHandle ops_len$VH() {
        return io_uring_probe.ops_len$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 ops_len;
     * }
     */
    public static byte ops_len$get(MemorySegment seg) {
        return (byte)io_uring_probe.ops_len$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 ops_len;
     * }
     */
    public static void ops_len$set(MemorySegment seg, byte x) {
        io_uring_probe.ops_len$VH.set(seg, x);
    }
    public static byte ops_len$get(MemorySegment seg, long index) {
        return (byte)io_uring_probe.ops_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ops_len$set(MemorySegment seg, long index, byte x) {
        io_uring_probe.ops_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resv"));
    public static VarHandle resv$VH() {
        return io_uring_probe.resv$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u16 resv;
     * }
     */
    public static short resv$get(MemorySegment seg) {
        return (short)io_uring_probe.resv$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u16 resv;
     * }
     */
    public static void resv$set(MemorySegment seg, short x) {
        io_uring_probe.resv$VH.set(seg, x);
    }
    public static short resv$get(MemorySegment seg, long index) {
        return (short)io_uring_probe.resv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resv$set(MemorySegment seg, long index, short x) {
        io_uring_probe.resv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment resv2$slice(MemorySegment seg) {
        return seg.asSlice(4, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


