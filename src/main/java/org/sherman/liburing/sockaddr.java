// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct sockaddr {
 *     sa_family_t sa_family;
 *     char sa_data[14];
 * };
 * }
 */
public class sockaddr {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
        MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
    ).withName("sockaddr");
    public static MemoryLayout $LAYOUT() {
        return sockaddr.$struct$LAYOUT;
    }
    static final VarHandle sa_family$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sa_family"));
    public static VarHandle sa_family$VH() {
        return sockaddr.sa_family$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * sa_family_t sa_family;
     * }
     */
    public static short sa_family$get(MemorySegment seg) {
        return (short)sockaddr.sa_family$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * sa_family_t sa_family;
     * }
     */
    public static void sa_family$set(MemorySegment seg, short x) {
        sockaddr.sa_family$VH.set(seg, x);
    }
    public static short sa_family$get(MemorySegment seg, long index) {
        return (short)sockaddr.sa_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_family$set(MemorySegment seg, long index, short x) {
        sockaddr.sa_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sa_data$slice(MemorySegment seg) {
        return seg.asSlice(2, 14);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


