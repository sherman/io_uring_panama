// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct file_dedupe_range_info {
 *     __s64 dest_fd;
 *     __u64 dest_offset;
 *     __u64 bytes_deduped;
 *     __s32 status;
 *     __u32 reserved;
 * };
 * }
 */
public class file_dedupe_range_info {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("dest_fd"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dest_offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bytes_deduped"),
        Constants$root.C_INT$LAYOUT.withName("status"),
        Constants$root.C_INT$LAYOUT.withName("reserved")
    ).withName("file_dedupe_range_info");
    public static MemoryLayout $LAYOUT() {
        return file_dedupe_range_info.$struct$LAYOUT;
    }
    static final VarHandle dest_fd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dest_fd"));
    public static VarHandle dest_fd$VH() {
        return file_dedupe_range_info.dest_fd$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __s64 dest_fd;
     * }
     */
    public static long dest_fd$get(MemorySegment seg) {
        return (long)file_dedupe_range_info.dest_fd$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __s64 dest_fd;
     * }
     */
    public static void dest_fd$set(MemorySegment seg, long x) {
        file_dedupe_range_info.dest_fd$VH.set(seg, x);
    }
    public static long dest_fd$get(MemorySegment seg, long index) {
        return (long)file_dedupe_range_info.dest_fd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dest_fd$set(MemorySegment seg, long index, long x) {
        file_dedupe_range_info.dest_fd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dest_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dest_offset"));
    public static VarHandle dest_offset$VH() {
        return file_dedupe_range_info.dest_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 dest_offset;
     * }
     */
    public static long dest_offset$get(MemorySegment seg) {
        return (long)file_dedupe_range_info.dest_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 dest_offset;
     * }
     */
    public static void dest_offset$set(MemorySegment seg, long x) {
        file_dedupe_range_info.dest_offset$VH.set(seg, x);
    }
    public static long dest_offset$get(MemorySegment seg, long index) {
        return (long)file_dedupe_range_info.dest_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dest_offset$set(MemorySegment seg, long index, long x) {
        file_dedupe_range_info.dest_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytes_deduped$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytes_deduped"));
    public static VarHandle bytes_deduped$VH() {
        return file_dedupe_range_info.bytes_deduped$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 bytes_deduped;
     * }
     */
    public static long bytes_deduped$get(MemorySegment seg) {
        return (long)file_dedupe_range_info.bytes_deduped$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 bytes_deduped;
     * }
     */
    public static void bytes_deduped$set(MemorySegment seg, long x) {
        file_dedupe_range_info.bytes_deduped$VH.set(seg, x);
    }
    public static long bytes_deduped$get(MemorySegment seg, long index) {
        return (long)file_dedupe_range_info.bytes_deduped$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytes_deduped$set(MemorySegment seg, long index, long x) {
        file_dedupe_range_info.bytes_deduped$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle status$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("status"));
    public static VarHandle status$VH() {
        return file_dedupe_range_info.status$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __s32 status;
     * }
     */
    public static int status$get(MemorySegment seg) {
        return (int)file_dedupe_range_info.status$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __s32 status;
     * }
     */
    public static void status$set(MemorySegment seg, int x) {
        file_dedupe_range_info.status$VH.set(seg, x);
    }
    public static int status$get(MemorySegment seg, long index) {
        return (int)file_dedupe_range_info.status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void status$set(MemorySegment seg, long index, int x) {
        file_dedupe_range_info.status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reserved"));
    public static VarHandle reserved$VH() {
        return file_dedupe_range_info.reserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 reserved;
     * }
     */
    public static int reserved$get(MemorySegment seg) {
        return (int)file_dedupe_range_info.reserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 reserved;
     * }
     */
    public static void reserved$set(MemorySegment seg, int x) {
        file_dedupe_range_info.reserved$VH.set(seg, x);
    }
    public static int reserved$get(MemorySegment seg, long index) {
        return (int)file_dedupe_range_info.reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, int x) {
        file_dedupe_range_info.reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


