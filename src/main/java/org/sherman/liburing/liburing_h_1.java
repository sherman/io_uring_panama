// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class liburing_h_1 {

    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ino64_t;
     * }
     */
    public static final OfLong ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long off64_t;
     * }
     */
    public static final OfLong off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int useconds_t;
     * }
     */
    public static final OfInt useconds_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$0.select$MH,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$0.pselect$MH,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timespec* __timeout, const __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long blkcnt64_t;
     * }
     */
    public static final OfLong blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt64_t;
     * }
     */
    public static final OfLong fsblkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt64_t;
     * }
     */
    public static final OfLong fsfilcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int socklen_t;
     * }
     */
    public static final OfInt socklen_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * enum __socket_type.SOCK_STREAM = 1;
     * }
     */
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_DGRAM = 2;
     * }
     */
    public static int SOCK_DGRAM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_RAW = 3;
     * }
     */
    public static int SOCK_RAW() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_RDM = 4;
     * }
     */
    public static int SOCK_RDM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_SEQPACKET = 5;
     * }
     */
    public static int SOCK_SEQPACKET() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_DCCP = 6;
     * }
     */
    public static int SOCK_DCCP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_PACKET = 10;
     * }
     */
    public static int SOCK_PACKET() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_CLOEXEC = 524288;
     * }
     */
    public static int SOCK_CLOEXEC() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_NONBLOCK = 2048;
     * }
     */
    public static int SOCK_NONBLOCK() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * typedef unsigned short sa_family_t;
     * }
     */
    public static final OfShort sa_family_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * enum .MSG_OOB = 1;
     * }
     */
    public static int MSG_OOB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MSG_PEEK = 2;
     * }
     */
    public static int MSG_PEEK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MSG_DONTROUTE = 4;
     * }
     */
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .MSG_TRYHARD = 4;
     * }
     */
    public static int MSG_TRYHARD() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .MSG_CTRUNC = 8;
     * }
     */
    public static int MSG_CTRUNC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .MSG_PROXY = 16;
     * }
     */
    public static int MSG_PROXY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .MSG_TRUNC = 32;
     * }
     */
    public static int MSG_TRUNC() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .MSG_DONTWAIT = 64;
     * }
     */
    public static int MSG_DONTWAIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .MSG_EOR = 128;
     * }
     */
    public static int MSG_EOR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .MSG_WAITALL = 256;
     * }
     */
    public static int MSG_WAITALL() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .MSG_FIN = 512;
     * }
     */
    public static int MSG_FIN() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .MSG_SYN = 1024;
     * }
     */
    public static int MSG_SYN() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .MSG_CONFIRM = 2048;
     * }
     */
    public static int MSG_CONFIRM() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .MSG_RST = 4096;
     * }
     */
    public static int MSG_RST() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .MSG_ERRQUEUE = 8192;
     * }
     */
    public static int MSG_ERRQUEUE() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .MSG_NOSIGNAL = 16384;
     * }
     */
    public static int MSG_NOSIGNAL() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum .MSG_MORE = 32768;
     * }
     */
    public static int MSG_MORE() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum .MSG_WAITFORONE = 65536;
     * }
     */
    public static int MSG_WAITFORONE() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum .MSG_BATCH = 262144;
     * }
     */
    public static int MSG_BATCH() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum .MSG_ZEROCOPY = 67108864;
     * }
     */
    public static int MSG_ZEROCOPY() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * enum .MSG_FASTOPEN = 536870912;
     * }
     */
    public static int MSG_FASTOPEN() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * enum .MSG_CMSG_CLOEXEC = 1073741824;
     * }
     */
    public static int MSG_CMSG_CLOEXEC() {
        return (int)1073741824L;
    }
    public static MethodHandle __cmsg_nxthdr$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__cmsg_nxthdr$MH,"__cmsg_nxthdr");
    }
    /**
     * {@snippet :
     * struct cmsghdr* __cmsg_nxthdr(struct msghdr* __mhdr, struct cmsghdr* __cmsg);
     * }
     */
    public static MemorySegment __cmsg_nxthdr(MemorySegment __mhdr, MemorySegment __cmsg) {
        var mh$ = __cmsg_nxthdr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__mhdr, __cmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SCM_RIGHTS = 1;
     * }
     */
    public static int SCM_RIGHTS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SCM_CREDENTIALS = 2;
     * }
     */
    public static int SCM_CREDENTIALS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef int __kernel_key_t;
     * }
     */
    public static final OfInt __kernel_key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __kernel_mqd_t;
     * }
     */
    public static final OfInt __kernel_mqd_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_old_uid_t;
     * }
     */
    public static final OfShort __kernel_old_uid_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_old_gid_t;
     * }
     */
    public static final OfShort __kernel_old_gid_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_old_dev_t;
     * }
     */
    public static final OfLong __kernel_old_dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_long_t;
     * }
     */
    public static final OfLong __kernel_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_ulong_t;
     * }
     */
    public static final OfLong __kernel_ulong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_ino_t;
     * }
     */
    public static final OfLong __kernel_ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_mode_t;
     * }
     */
    public static final OfInt __kernel_mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __kernel_pid_t;
     * }
     */
    public static final OfInt __kernel_pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __kernel_ipc_pid_t;
     * }
     */
    public static final OfInt __kernel_ipc_pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_uid_t;
     * }
     */
    public static final OfInt __kernel_uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_gid_t;
     * }
     */
    public static final OfInt __kernel_gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_suseconds_t;
     * }
     */
    public static final OfLong __kernel_suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __kernel_daddr_t;
     * }
     */
    public static final OfInt __kernel_daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_uid32_t;
     * }
     */
    public static final OfInt __kernel_uid32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_gid32_t;
     * }
     */
    public static final OfInt __kernel_gid32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_size_t;
     * }
     */
    public static final OfLong __kernel_size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_ssize_t;
     * }
     */
    public static final OfLong __kernel_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_ptrdiff_t;
     * }
     */
    public static final OfLong __kernel_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_off_t;
     * }
     */
    public static final OfLong __kernel_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long __kernel_loff_t;
     * }
     */
    public static final OfLong __kernel_loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_old_time_t;
     * }
     */
    public static final OfLong __kernel_old_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_time_t;
     * }
     */
    public static final OfLong __kernel_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long __kernel_time64_t;
     * }
     */
    public static final OfLong __kernel_time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __kernel_clock_t;
     * }
     */
    public static final OfLong __kernel_clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __kernel_timer_t;
     * }
     */
    public static final OfInt __kernel_timer_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __kernel_clockid_t;
     * }
     */
    public static final OfInt __kernel_clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef char* __kernel_caddr_t;
     * }
     */
    public static final OfAddress __kernel_caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_uid16_t;
     * }
     */
    public static final OfShort __kernel_uid16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_gid16_t;
     * }
     */
    public static final OfShort __kernel_gid16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * enum .SHUT_RD = 0;
     * }
     */
    public static int SHUT_RD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SHUT_WR = 1;
     * }
     */
    public static int SHUT_WR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SHUT_RDWR = 2;
     * }
     */
    public static int SHUT_RDWR() {
        return (int)2L;
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$0.socket$MH,"socket");
    }
    /**
     * {@snippet :
     * int socket(int __domain, int __type, int __protocol);
     * }
     */
    public static int socket(int __domain, int __type, int __protocol) {
        var mh$ = socket$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socketpair$MH() {
        return RuntimeHelper.requireNonNull(constants$1.socketpair$MH,"socketpair");
    }
    /**
     * {@snippet :
     * int socketpair(int __domain, int __type, int __protocol, int __fds[2]);
     * }
     */
    public static int socketpair(int __domain, int __type, int __protocol, MemorySegment __fds) {
        var mh$ = socketpair$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol, __fds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$1.bind$MH,"bind");
    }
    /**
     * {@snippet :
     * int bind(int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);
     * }
     */
    public static int bind(int __fd, MemorySegment __addr, int __len) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$1.getsockname$MH,"getsockname");
    }
    /**
     * {@snippet :
     * int getsockname(int __fd, __SOCKADDR_ARG __addr, socklen_t* __len);
     * }
     */
    public static int getsockname(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1.connect$MH,"connect");
    }
    /**
     * {@snippet :
     * int connect(int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);
     * }
     */
    public static int connect(int __fd, MemorySegment __addr, int __len) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$1.getpeername$MH,"getpeername");
    }
    /**
     * {@snippet :
     * int getpeername(int __fd, __SOCKADDR_ARG __addr, socklen_t* __len);
     * }
     */
    public static int getpeername(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$1.send$MH,"send");
    }
    /**
     * {@snippet :
     * ssize_t send(int __fd, void* __buf, size_t __n, int __flags);
     * }
     */
    public static long send(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = send$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$2.recv$MH,"recv");
    }
    /**
     * {@snippet :
     * ssize_t recv(int __fd, void* __buf, size_t __n, int __flags);
     * }
     */
    public static long recv(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = recv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$2.sendto$MH,"sendto");
    }
    /**
     * {@snippet :
     * ssize_t sendto(int __fd, void* __buf, size_t __n, int __flags, __CONST_SOCKADDR_ARG __addr, socklen_t __addr_len);
     * }
     */
    public static long sendto(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, int __addr_len) {
        var mh$ = sendto$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$2.recvfrom$MH,"recvfrom");
    }
    /**
     * {@snippet :
     * ssize_t recvfrom(int __fd, void* __buf, size_t __n, int __flags, __SOCKADDR_ARG __addr, socklen_t* __addr_len);
     * }
     */
    public static long recvfrom(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = recvfrom$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$2.sendmsg$MH,"sendmsg");
    }
    /**
     * {@snippet :
     * ssize_t sendmsg(int __fd, struct msghdr* __message, int __flags);
     * }
     */
    public static long sendmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = sendmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendmmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$2.sendmmsg$MH,"sendmmsg");
    }
    /**
     * {@snippet :
     * int sendmmsg(int __fd, struct mmsghdr* __vmessages, unsigned int __vlen, int __flags);
     * }
     */
    public static int sendmmsg(int __fd, MemorySegment __vmessages, int __vlen, int __flags) {
        var mh$ = sendmmsg$MH();
        try {
            return (int)mh$.invokeExact(__fd, __vmessages, __vlen, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$2.recvmsg$MH,"recvmsg");
    }
    /**
     * {@snippet :
     * ssize_t recvmsg(int __fd, struct msghdr* __message, int __flags);
     * }
     */
    public static long recvmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = recvmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvmmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$3.recvmmsg$MH,"recvmmsg");
    }
    /**
     * {@snippet :
     * int recvmmsg(int __fd, struct mmsghdr* __vmessages, unsigned int __vlen, int __flags, struct timespec* __tmo);
     * }
     */
    public static int recvmmsg(int __fd, MemorySegment __vmessages, int __vlen, int __flags, MemorySegment __tmo) {
        var mh$ = recvmmsg$MH();
        try {
            return (int)mh$.invokeExact(__fd, __vmessages, __vlen, __flags, __tmo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$3.getsockopt$MH,"getsockopt");
    }
    /**
     * {@snippet :
     * int getsockopt(int __fd, int __level, int __optname, void* __optval, socklen_t* __optlen);
     * }
     */
    public static int getsockopt(int __fd, int __level, int __optname, MemorySegment __optval, MemorySegment __optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setsockopt$MH,"setsockopt");
    }
    /**
     * {@snippet :
     * int setsockopt(int __fd, int __level, int __optname, void* __optval, socklen_t __optlen);
     * }
     */
    public static int setsockopt(int __fd, int __level, int __optname, MemorySegment __optval, int __optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.listen$MH,"listen");
    }
    /**
     * {@snippet :
     * int listen(int __fd, int __n);
     * }
     */
    public static int listen(int __fd, int __n) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(__fd, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$3.accept$MH,"accept");
    }
    /**
     * {@snippet :
     * int accept(int __fd, __SOCKADDR_ARG __addr, socklen_t* __addr_len);
     * }
     */
    public static int accept(int __fd, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = accept$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accept4$MH() {
        return RuntimeHelper.requireNonNull(constants$3.accept4$MH,"accept4");
    }
    /**
     * {@snippet :
     * int accept4(int __fd, __SOCKADDR_ARG __addr, socklen_t* __addr_len, int __flags);
     * }
     */
    public static int accept4(int __fd, MemorySegment __addr, MemorySegment __addr_len, int __flags) {
        var mh$ = accept4$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __addr_len, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$4.shutdown$MH,"shutdown");
    }
    /**
     * {@snippet :
     * int shutdown(int __fd, int __how);
     * }
     */
    public static int shutdown(int __fd, int __how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sockatmark$MH() {
        return RuntimeHelper.requireNonNull(constants$4.sockatmark$MH,"sockatmark");
    }
    /**
     * {@snippet :
     * int sockatmark(int __fd);
     * }
     */
    public static int sockatmark(int __fd) {
        var mh$ = sockatmark$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isfdtype$MH() {
        return RuntimeHelper.requireNonNull(constants$4.isfdtype$MH,"isfdtype");
    }
    /**
     * {@snippet :
     * int isfdtype(int __fd, int __fdtype);
     * }
     */
    public static int isfdtype(int __fd, int __fdtype) {
        var mh$ = isfdtype$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fdtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.stat$MH,"stat");
    }
    /**
     * {@snippet :
     * int stat(char* __file, struct stat* __buf);
     * }
     */
    public static int stat(MemorySegment __file, MemorySegment __buf) {
        var mh$ = stat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fstat$MH,"fstat");
    }
    /**
     * {@snippet :
     * int fstat(int __fd, struct stat* __buf);
     * }
     */
    public static int fstat(int __fd, MemorySegment __buf) {
        var mh$ = fstat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat64$MH() {
        return RuntimeHelper.requireNonNull(constants$4.stat64$MH,"stat64");
    }
    /**
     * {@snippet :
     * int stat64(char* __file, struct stat64* __buf);
     * }
     */
    public static int stat64(MemorySegment __file, MemorySegment __buf) {
        var mh$ = stat64$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat64$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fstat64$MH,"fstat64");
    }
    /**
     * {@snippet :
     * int fstat64(int __fd, struct stat64* __buf);
     * }
     */
    public static int fstat64(int __fd, MemorySegment __buf) {
        var mh$ = fstat64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fstatat$MH,"fstatat");
    }
    /**
     * {@snippet :
     * int fstatat(int __fd, char* __file, struct stat* __buf, int __flag);
     * }
     */
    public static int fstatat(int __fd, MemorySegment __file, MemorySegment __buf, int __flag) {
        var mh$ = fstatat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __buf, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat64$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fstatat64$MH,"fstatat64");
    }
    /**
     * {@snippet :
     * int fstatat64(int __fd, char* __file, struct stat64* __buf, int __flag);
     * }
     */
    public static int fstatat64(int __fd, MemorySegment __file, MemorySegment __buf, int __flag) {
        var mh$ = fstatat64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __buf, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lstat$MH,"lstat");
    }
    /**
     * {@snippet :
     * int lstat(char* __file, struct stat* __buf);
     * }
     */
    public static int lstat(MemorySegment __file, MemorySegment __buf) {
        var mh$ = lstat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat64$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lstat64$MH,"lstat64");
    }
    /**
     * {@snippet :
     * int lstat64(char* __file, struct stat64* __buf);
     * }
     */
    public static int lstat64(MemorySegment __file, MemorySegment __buf) {
        var mh$ = lstat64$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$5.chmod$MH,"chmod");
    }
    /**
     * {@snippet :
     * int chmod(char* __file, __mode_t __mode);
     * }
     */
    public static int chmod(MemorySegment __file, int __mode) {
        var mh$ = chmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lchmod$MH,"lchmod");
    }
    /**
     * {@snippet :
     * int lchmod(char* __file, __mode_t __mode);
     * }
     */
    public static int lchmod(MemorySegment __file, int __mode) {
        var mh$ = lchmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fchmod$MH,"fchmod");
    }
    /**
     * {@snippet :
     * int fchmod(int __fd, __mode_t __mode);
     * }
     */
    public static int fchmod(int __fd, int __mode) {
        var mh$ = fchmod$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodat$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fchmodat$MH,"fchmodat");
    }
    /**
     * {@snippet :
     * int fchmodat(int __fd, char* __file, __mode_t __mode, int __flag);
     * }
     */
    public static int fchmodat(int __fd, MemorySegment __file, int __mode, int __flag) {
        var mh$ = fchmodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __mode, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umask$MH() {
        return RuntimeHelper.requireNonNull(constants$6.umask$MH,"umask");
    }
    /**
     * {@snippet :
     * __mode_t umask(__mode_t __mask);
     * }
     */
    public static int umask(int __mask) {
        var mh$ = umask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getumask$MH() {
        return RuntimeHelper.requireNonNull(constants$6.getumask$MH,"getumask");
    }
    /**
     * {@snippet :
     * __mode_t getumask();
     * }
     */
    public static int getumask() {
        var mh$ = getumask$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mkdir$MH,"mkdir");
    }
    /**
     * {@snippet :
     * int mkdir(char* __path, __mode_t __mode);
     * }
     */
    public static int mkdir(MemorySegment __path, int __mode) {
        var mh$ = mkdir$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mkdirat$MH,"mkdirat");
    }
    /**
     * {@snippet :
     * int mkdirat(int __fd, char* __path, __mode_t __mode);
     * }
     */
    public static int mkdirat(int __fd, MemorySegment __path, int __mode) {
        var mh$ = mkdirat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mknod$MH,"mknod");
    }
    /**
     * {@snippet :
     * int mknod(char* __path, __mode_t __mode, __dev_t __dev);
     * }
     */
    public static int mknod(MemorySegment __path, int __mode, long __dev) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknodat$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mknodat$MH,"mknodat");
    }
    /**
     * {@snippet :
     * int mknodat(int __fd, char* __path, __mode_t __mode, __dev_t __dev);
     * }
     */
    public static int mknodat(int __fd, MemorySegment __path, int __mode, long __dev) {
        var mh$ = mknodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifo$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mkfifo$MH,"mkfifo");
    }
    /**
     * {@snippet :
     * int mkfifo(char* __path, __mode_t __mode);
     * }
     */
    public static int mkfifo(MemorySegment __path, int __mode) {
        var mh$ = mkfifo$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifoat$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mkfifoat$MH,"mkfifoat");
    }
    /**
     * {@snippet :
     * int mkfifoat(int __fd, char* __path, __mode_t __mode);
     * }
     */
    public static int mkfifoat(int __fd, MemorySegment __path, int __mode) {
        var mh$ = mkfifoat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimensat$MH() {
        return RuntimeHelper.requireNonNull(constants$7.utimensat$MH,"utimensat");
    }
    /**
     * {@snippet :
     * int utimensat(int __fd, char* __path, struct timespec __times[2], int __flags);
     * }
     */
    public static int utimensat(int __fd, MemorySegment __path, MemorySegment __times, int __flags) {
        var mh$ = utimensat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __times, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimens$MH() {
        return RuntimeHelper.requireNonNull(constants$8.futimens$MH,"futimens");
    }
    /**
     * {@snippet :
     * int futimens(int __fd, struct timespec __times[2]);
     * }
     */
    public static int futimens(int __fd, MemorySegment __times) {
        var mh$ = futimens$MH();
        try {
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef signed char __s8;
     * }
     */
    public static final OfByte __s8 = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __u8;
     * }
     */
    public static final OfByte __u8 = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __s16;
     * }
     */
    public static final OfShort __s16 = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __u16;
     * }
     */
    public static final OfShort __u16 = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __s32;
     * }
     */
    public static final OfInt __s32 = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __u32;
     * }
     */
    public static final OfInt __u32 = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long long __s64;
     * }
     */
    public static final OfLong __s64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long __u64;
     * }
     */
    public static final OfLong __u64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __le16;
     * }
     */
    public static final OfShort __le16 = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __be16;
     * }
     */
    public static final OfShort __be16 = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __le32;
     * }
     */
    public static final OfInt __le32 = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __be32;
     * }
     */
    public static final OfInt __be32 = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long __le64;
     * }
     */
    public static final OfLong __le64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long __be64;
     * }
     */
    public static final OfLong __be64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __sum16;
     * }
     */
    public static final OfShort __sum16 = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __wsum;
     * }
     */
    public static final OfInt __wsum = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __poll_t;
     * }
     */
    public static final OfInt __poll_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle statx$MH() {
        return RuntimeHelper.requireNonNull(constants$8.statx$MH,"statx");
    }
    /**
     * {@snippet :
     * int statx(int __dirfd, char* __path, int __flags, unsigned int __mask, struct statx* __buf);
     * }
     */
    public static int statx(int __dirfd, MemorySegment __path, int __flags, int __mask, MemorySegment __buf) {
        var mh$ = statx$MH();
        try {
            return (int)mh$.invokeExact(__dirfd, __path, __flags, __mask, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readv$MH() {
        return RuntimeHelper.requireNonNull(constants$8.readv$MH,"readv");
    }
    /**
     * {@snippet :
     * ssize_t readv(int __fd, struct iovec* __iovec, int __count);
     * }
     */
    public static long readv(int __fd, MemorySegment __iovec, int __count) {
        var mh$ = readv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle writev$MH() {
        return RuntimeHelper.requireNonNull(constants$8.writev$MH,"writev");
    }
    /**
     * {@snippet :
     * ssize_t writev(int __fd, struct iovec* __iovec, int __count);
     * }
     */
    public static long writev(int __fd, MemorySegment __iovec, int __count) {
        var mh$ = writev$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv$MH() {
        return RuntimeHelper.requireNonNull(constants$8.preadv$MH,"preadv");
    }
    /**
     * {@snippet :
     * ssize_t preadv(int __fd, struct iovec* __iovec, int __count, __off_t __offset);
     * }
     */
    public static long preadv(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = preadv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev$MH() {
        return RuntimeHelper.requireNonNull(constants$8.pwritev$MH,"pwritev");
    }
    /**
     * {@snippet :
     * ssize_t pwritev(int __fd, struct iovec* __iovec, int __count, __off_t __offset);
     * }
     */
    public static long pwritev(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = pwritev$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv64$MH() {
        return RuntimeHelper.requireNonNull(constants$9.preadv64$MH,"preadv64");
    }
    /**
     * {@snippet :
     * ssize_t preadv64(int __fd, struct iovec* __iovec, int __count, __off64_t __offset);
     * }
     */
    public static long preadv64(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = preadv64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev64$MH() {
        return RuntimeHelper.requireNonNull(constants$9.pwritev64$MH,"pwritev64");
    }
    /**
     * {@snippet :
     * ssize_t pwritev64(int __fd, struct iovec* __iovec, int __count, __off64_t __offset);
     * }
     */
    public static long pwritev64(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = pwritev64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv2$MH() {
        return RuntimeHelper.requireNonNull(constants$9.preadv2$MH,"preadv2");
    }
    /**
     * {@snippet :
     * ssize_t preadv2(int __fp, struct iovec* __iovec, int __count, __off_t __offset, int ___flags);
     * }
     */
    public static long preadv2(int __fp, MemorySegment __iovec, int __count, long __offset, int ___flags) {
        var mh$ = preadv2$MH();
        try {
            return (long)mh$.invokeExact(__fp, __iovec, __count, __offset, ___flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev2$MH() {
        return RuntimeHelper.requireNonNull(constants$9.pwritev2$MH,"pwritev2");
    }
    /**
     * {@snippet :
     * ssize_t pwritev2(int __fd, struct iovec* __iodev, int __count, __off_t __offset, int __flags);
     * }
     */
    public static long pwritev2(int __fd, MemorySegment __iodev, int __count, long __offset, int __flags) {
        var mh$ = pwritev2$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iodev, __count, __offset, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv64v2$MH() {
        return RuntimeHelper.requireNonNull(constants$9.preadv64v2$MH,"preadv64v2");
    }
    /**
     * {@snippet :
     * ssize_t preadv64v2(int __fp, struct iovec* __iovec, int __count, __off64_t __offset, int ___flags);
     * }
     */
    public static long preadv64v2(int __fp, MemorySegment __iovec, int __count, long __offset, int ___flags) {
        var mh$ = preadv64v2$MH();
        try {
            return (long)mh$.invokeExact(__fp, __iovec, __count, __offset, ___flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev64v2$MH() {
        return RuntimeHelper.requireNonNull(constants$9.pwritev64v2$MH,"pwritev64v2");
    }
    /**
     * {@snippet :
     * ssize_t pwritev64v2(int __fd, struct iovec* __iodev, int __count, __off64_t __offset, int __flags);
     * }
     */
    public static long pwritev64v2(int __fd, MemorySegment __iodev, int __count, long __offset, int __flags) {
        var mh$ = pwritev64v2$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iodev, __count, __offset, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle process_vm_readv$MH() {
        return RuntimeHelper.requireNonNull(constants$10.process_vm_readv$MH,"process_vm_readv");
    }
    /**
     * {@snippet :
     * ssize_t process_vm_readv(pid_t __pid, struct iovec* __lvec, unsigned long __liovcnt, struct iovec* __rvec, unsigned long __riovcnt, unsigned long __flags);
     * }
     */
    public static long process_vm_readv(int __pid, MemorySegment __lvec, long __liovcnt, MemorySegment __rvec, long __riovcnt, long __flags) {
        var mh$ = process_vm_readv$MH();
        try {
            return (long)mh$.invokeExact(__pid, __lvec, __liovcnt, __rvec, __riovcnt, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle process_vm_writev$MH() {
        return RuntimeHelper.requireNonNull(constants$10.process_vm_writev$MH,"process_vm_writev");
    }
    /**
     * {@snippet :
     * ssize_t process_vm_writev(pid_t __pid, struct iovec* __lvec, unsigned long __liovcnt, struct iovec* __rvec, unsigned long __riovcnt, unsigned long __flags);
     * }
     */
    public static long process_vm_writev(int __pid, MemorySegment __lvec, long __liovcnt, MemorySegment __rvec, long __riovcnt, long __flags) {
        var mh$ = process_vm_writev$MH();
        try {
            return (long)mh$.invokeExact(__pid, __lvec, __liovcnt, __rvec, __riovcnt, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$10.__errno_location$MH,"__errno_location");
    }
    /**
     * {@snippet :
     * int* __errno_location();
     * }
     */
    public static MemorySegment __errno_location() {
        var mh$ = __errno_location$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout program_invocation_name$LAYOUT() {
        return constants$10.program_invocation_name$LAYOUT;
    }
    public static VarHandle program_invocation_name$VH() {
        return constants$10.program_invocation_name$VH;
    }
    public static MemorySegment program_invocation_name$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$10.program_invocation_name$SEGMENT,"program_invocation_name");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char* program_invocation_name;
     * }
     */
    public static MemorySegment program_invocation_name$get() {
        return (java.lang.foreign.MemorySegment) constants$10.program_invocation_name$VH.get(RuntimeHelper.requireNonNull(constants$10.program_invocation_name$SEGMENT, "program_invocation_name"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char* program_invocation_name;
     * }
     */
    public static void program_invocation_name$set(MemorySegment x) {
        constants$10.program_invocation_name$VH.set(RuntimeHelper.requireNonNull(constants$10.program_invocation_name$SEGMENT, "program_invocation_name"), x);
    }
    public static MemoryLayout program_invocation_short_name$LAYOUT() {
        return constants$10.program_invocation_short_name$LAYOUT;
    }
    public static VarHandle program_invocation_short_name$VH() {
        return constants$10.program_invocation_short_name$VH;
    }
    public static MemorySegment program_invocation_short_name$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$10.program_invocation_short_name$SEGMENT,"program_invocation_short_name");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char* program_invocation_short_name;
     * }
     */
    public static MemorySegment program_invocation_short_name$get() {
        return (java.lang.foreign.MemorySegment) constants$10.program_invocation_short_name$VH.get(RuntimeHelper.requireNonNull(constants$10.program_invocation_short_name$SEGMENT, "program_invocation_short_name"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char* program_invocation_short_name;
     * }
     */
    public static void program_invocation_short_name$set(MemorySegment x) {
        constants$10.program_invocation_short_name$VH.set(RuntimeHelper.requireNonNull(constants$10.program_invocation_short_name$SEGMENT, "program_invocation_short_name"), x);
    }
    /**
     * {@snippet :
     * typedef int error_t;
     * }
     */
    public static final OfInt error_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int sig_atomic_t;
     * }
     */
    public static final OfInt sig_atomic_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * enum .SI_ASYNCNL = -60;
     * }
     */
    public static int SI_ASYNCNL() {
        return (int)-60L;
    }
    /**
     * {@snippet :
     * enum .SI_DETHREAD = -7;
     * }
     */
    public static int SI_DETHREAD() {
        return (int)-7L;
    }
    /**
     * {@snippet :
     * enum .SI_TKILL = -6;
     * }
     */
    public static int SI_TKILL() {
        return (int)-6L;
    }
    /**
     * {@snippet :
     * enum .SI_SIGIO = -5;
     * }
     */
    public static int SI_SIGIO() {
        return (int)-5L;
    }
    /**
     * {@snippet :
     * enum .SI_ASYNCIO = -4;
     * }
     */
    public static int SI_ASYNCIO() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * enum .SI_MESGQ = -3;
     * }
     */
    public static int SI_MESGQ() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * enum .SI_TIMER = -2;
     * }
     */
    public static int SI_TIMER() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * enum .SI_QUEUE = -1;
     * }
     */
    public static int SI_QUEUE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .SI_USER = 0;
     * }
     */
    public static int SI_USER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SI_KERNEL = 128;
     * }
     */
    public static int SI_KERNEL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .ILL_ILLOPC = 1;
     * }
     */
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ILL_ILLOPN = 2;
     * }
     */
    public static int ILL_ILLOPN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ILL_ILLADR = 3;
     * }
     */
    public static int ILL_ILLADR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .ILL_ILLTRP = 4;
     * }
     */
    public static int ILL_ILLTRP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .ILL_PRVOPC = 5;
     * }
     */
    public static int ILL_PRVOPC() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .ILL_PRVREG = 6;
     * }
     */
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .ILL_COPROC = 7;
     * }
     */
    public static int ILL_COPROC() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .ILL_BADSTK = 8;
     * }
     */
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .ILL_BADIADDR = 9;
     * }
     */
    public static int ILL_BADIADDR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .FPE_INTDIV = 1;
     * }
     */
    public static int FPE_INTDIV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .FPE_INTOVF = 2;
     * }
     */
    public static int FPE_INTOVF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .FPE_FLTDIV = 3;
     * }
     */
    public static int FPE_FLTDIV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .FPE_FLTOVF = 4;
     * }
     */
    public static int FPE_FLTOVF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .FPE_FLTUND = 5;
     * }
     */
    public static int FPE_FLTUND() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .FPE_FLTRES = 6;
     * }
     */
    public static int FPE_FLTRES() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .FPE_FLTINV = 7;
     * }
     */
    public static int FPE_FLTINV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .FPE_FLTSUB = 8;
     * }
     */
    public static int FPE_FLTSUB() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .FPE_FLTUNK = 14;
     * }
     */
    public static int FPE_FLTUNK() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .FPE_CONDTRAP = 15;
     * }
     */
    public static int FPE_CONDTRAP() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .SEGV_MAPERR = 1;
     * }
     */
    public static int SEGV_MAPERR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SEGV_ACCERR = 2;
     * }
     */
    public static int SEGV_ACCERR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SEGV_BNDERR = 3;
     * }
     */
    public static int SEGV_BNDERR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SEGV_PKUERR = 4;
     * }
     */
    public static int SEGV_PKUERR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SEGV_ACCADI = 5;
     * }
     */
    public static int SEGV_ACCADI() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SEGV_ADIDERR = 6;
     * }
     */
    public static int SEGV_ADIDERR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SEGV_ADIPERR = 7;
     * }
     */
    public static int SEGV_ADIPERR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SEGV_MTEAERR = 8;
     * }
     */
    public static int SEGV_MTEAERR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SEGV_MTESERR = 9;
     * }
     */
    public static int SEGV_MTESERR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .BUS_ADRALN = 1;
     * }
     */
    public static int BUS_ADRALN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .BUS_ADRERR = 2;
     * }
     */
    public static int BUS_ADRERR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .BUS_OBJERR = 3;
     * }
     */
    public static int BUS_OBJERR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .BUS_MCEERR_AR = 4;
     * }
     */
    public static int BUS_MCEERR_AR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .BUS_MCEERR_AO = 5;
     * }
     */
    public static int BUS_MCEERR_AO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .TRAP_BRKPT = 1;
     * }
     */
    public static int TRAP_BRKPT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .TRAP_TRACE = 2;
     * }
     */
    public static int TRAP_TRACE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .TRAP_BRANCH = 3;
     * }
     */
    public static int TRAP_BRANCH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .TRAP_HWBKPT = 4;
     * }
     */
    public static int TRAP_HWBKPT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .TRAP_UNK = 5;
     * }
     */
    public static int TRAP_UNK() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .CLD_EXITED = 1;
     * }
     */
    public static int CLD_EXITED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .CLD_KILLED = 2;
     * }
     */
    public static int CLD_KILLED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .CLD_DUMPED = 3;
     * }
     */
    public static int CLD_DUMPED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .CLD_TRAPPED = 4;
     * }
     */
    public static int CLD_TRAPPED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .CLD_STOPPED = 5;
     * }
     */
    public static int CLD_STOPPED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .CLD_CONTINUED = 6;
     * }
     */
    public static int CLD_CONTINUED() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .POLL_IN = 1;
     * }
     */
    public static int POLL_IN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .POLL_OUT = 2;
     * }
     */
    public static int POLL_OUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .POLL_MSG = 3;
     * }
     */
    public static int POLL_MSG() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .POLL_ERR = 4;
     * }
     */
    public static int POLL_ERR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .POLL_PRI = 5;
     * }
     */
    public static int POLL_PRI() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .POLL_HUP = 6;
     * }
     */
    public static int POLL_HUP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SIGEV_SIGNAL = 0;
     * }
     */
    public static int SIGEV_SIGNAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SIGEV_NONE = 1;
     * }
     */
    public static int SIGEV_NONE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SIGEV_THREAD = 2;
     * }
     */
    public static int SIGEV_THREAD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SIGEV_THREAD_ID = 4;
     * }
     */
    public static int SIGEV_THREAD_ID() {
        return (int)4L;
    }
    public static MethodHandle __sysv_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$11.__sysv_signal$MH,"__sysv_signal");
    }
    /**
     * {@snippet :
     * __sighandler_t __sysv_signal(int __sig, __sighandler_t __handler);
     * }
     */
    public static MemorySegment __sysv_signal(int __sig, MemorySegment __handler) {
        var mh$ = __sysv_signal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysv_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sysv_signal$MH,"sysv_signal");
    }
    /**
     * {@snippet :
     * __sighandler_t sysv_signal(int __sig, __sighandler_t __handler);
     * }
     */
    public static MemorySegment sysv_signal(int __sig, MemorySegment __handler) {
        var mh$ = sysv_signal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle signal$MH() {
        return RuntimeHelper.requireNonNull(constants$11.signal$MH,"signal");
    }
    /**
     * {@snippet :
     * __sighandler_t signal(int __sig, __sighandler_t __handler);
     * }
     */
    public static MemorySegment signal(int __sig, MemorySegment __handler) {
        var mh$ = signal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kill$MH() {
        return RuntimeHelper.requireNonNull(constants$11.kill$MH,"kill");
    }
    /**
     * {@snippet :
     * int kill(__pid_t __pid, int __sig);
     * }
     */
    public static int kill(int __pid, int __sig) {
        var mh$ = kill$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle killpg$MH() {
        return RuntimeHelper.requireNonNull(constants$11.killpg$MH,"killpg");
    }
    /**
     * {@snippet :
     * int killpg(__pid_t __pgrp, int __sig);
     * }
     */
    public static int killpg(int __pgrp, int __sig) {
        var mh$ = killpg$MH();
        try {
            return (int)mh$.invokeExact(__pgrp, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle raise$MH() {
        return RuntimeHelper.requireNonNull(constants$12.raise$MH,"raise");
    }
    /**
     * {@snippet :
     * int raise(int __sig);
     * }
     */
    public static int raise(int __sig) {
        var mh$ = raise$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ssignal$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ssignal$MH,"ssignal");
    }
    /**
     * {@snippet :
     * __sighandler_t ssignal(int __sig, __sighandler_t __handler);
     * }
     */
    public static MemorySegment ssignal(int __sig, MemorySegment __handler) {
        var mh$ = ssignal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$12.gsignal$MH,"gsignal");
    }
    /**
     * {@snippet :
     * int gsignal(int __sig);
     * }
     */
    public static int gsignal(int __sig) {
        var mh$ = gsignal$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psignal$MH() {
        return RuntimeHelper.requireNonNull(constants$12.psignal$MH,"psignal");
    }
    /**
     * {@snippet :
     * void psignal(int __sig, char* __s);
     * }
     */
    public static void psignal(int __sig, MemorySegment __s) {
        var mh$ = psignal$MH();
        try {
            mh$.invokeExact(__sig, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psiginfo$MH() {
        return RuntimeHelper.requireNonNull(constants$12.psiginfo$MH,"psiginfo");
    }
    /**
     * {@snippet :
     * void psiginfo(const siginfo_t* __pinfo, char* __s);
     * }
     */
    public static void psiginfo(MemorySegment __pinfo, MemorySegment __s) {
        var mh$ = psiginfo$MH();
        try {
            mh$.invokeExact(__pinfo, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigpause$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sigpause$MH,"sigpause");
    }
    /**
     * {@snippet :
     * int sigpause(int __sig);
     * }
     */
    public static int sigpause(int __sig) {
        var mh$ = sigpause$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigblock$MH() {
        return RuntimeHelper.requireNonNull(constants$13.sigblock$MH,"sigblock");
    }
    /**
     * {@snippet :
     * int sigblock(int __mask);
     * }
     */
    public static int sigblock(int __mask) {
        var mh$ = sigblock$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$13.sigsetmask$MH,"sigsetmask");
    }
    /**
     * {@snippet :
     * int sigsetmask(int __mask);
     * }
     */
    public static int sigsetmask(int __mask) {
        var mh$ = sigsetmask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle siggetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$13.siggetmask$MH,"siggetmask");
    }
    /**
     * {@snippet :
     * int siggetmask();
     * }
     */
    public static int siggetmask() {
        var mh$ = siggetmask$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigemptyset$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sigemptyset$MH,"sigemptyset");
    }
    /**
     * {@snippet :
     * int sigemptyset(sigset_t* __set);
     * }
     */
    public static int sigemptyset(MemorySegment __set) {
        var mh$ = sigemptyset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigfillset$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sigfillset$MH,"sigfillset");
    }
    /**
     * {@snippet :
     * int sigfillset(sigset_t* __set);
     * }
     */
    public static int sigfillset(MemorySegment __set) {
        var mh$ = sigfillset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaddset$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sigaddset$MH,"sigaddset");
    }
    /**
     * {@snippet :
     * int sigaddset(sigset_t* __set, int __signo);
     * }
     */
    public static int sigaddset(MemorySegment __set, int __signo) {
        var mh$ = sigaddset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigdelset$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sigdelset$MH,"sigdelset");
    }
    /**
     * {@snippet :
     * int sigdelset(sigset_t* __set, int __signo);
     * }
     */
    public static int sigdelset(MemorySegment __set, int __signo) {
        var mh$ = sigdelset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigismember$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sigismember$MH,"sigismember");
    }
    /**
     * {@snippet :
     * int sigismember(const sigset_t* __set, int __signo);
     * }
     */
    public static int sigismember(MemorySegment __set, int __signo) {
        var mh$ = sigismember$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigisemptyset$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigisemptyset$MH,"sigisemptyset");
    }
    /**
     * {@snippet :
     * int sigisemptyset(const sigset_t* __set);
     * }
     */
    public static int sigisemptyset(MemorySegment __set) {
        var mh$ = sigisemptyset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigandset$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigandset$MH,"sigandset");
    }
    /**
     * {@snippet :
     * int sigandset(sigset_t* __set, const sigset_t* __left, const sigset_t* __right);
     * }
     */
    public static int sigandset(MemorySegment __set, MemorySegment __left, MemorySegment __right) {
        var mh$ = sigandset$MH();
        try {
            return (int)mh$.invokeExact(__set, __left, __right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigorset$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigorset$MH,"sigorset");
    }
    /**
     * {@snippet :
     * int sigorset(sigset_t* __set, const sigset_t* __left, const sigset_t* __right);
     * }
     */
    public static int sigorset(MemorySegment __set, MemorySegment __left, MemorySegment __right) {
        var mh$ = sigorset$MH();
        try {
            return (int)mh$.invokeExact(__set, __left, __right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigprocmask$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigprocmask$MH,"sigprocmask");
    }
    /**
     * {@snippet :
     * int sigprocmask(int __how, const sigset_t* __set, sigset_t* __oset);
     * }
     */
    public static int sigprocmask(int __how, MemorySegment __set, MemorySegment __oset) {
        var mh$ = sigprocmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __set, __oset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsuspend$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigsuspend$MH,"sigsuspend");
    }
    /**
     * {@snippet :
     * int sigsuspend(const sigset_t* __set);
     * }
     */
    public static int sigsuspend(MemorySegment __set) {
        var mh$ = sigsuspend$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaction$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigaction$MH,"sigaction");
    }
    /**
     * {@snippet :
     * int sigaction(int __sig, struct sigaction* __act, struct sigaction* __oact);
     * }
     */
    public static int sigaction(int __sig, MemorySegment __act, MemorySegment __oact) {
        var mh$ = sigaction$MH();
        try {
            return (int)mh$.invokeExact(__sig, __act, __oact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigpending$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigpending$MH,"sigpending");
    }
    /**
     * {@snippet :
     * int sigpending(sigset_t* __set);
     * }
     */
    public static int sigpending(MemorySegment __set) {
        var mh$ = sigpending$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwait$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigwait$MH,"sigwait");
    }
    /**
     * {@snippet :
     * int sigwait(const sigset_t* __set, int* __sig);
     * }
     */
    public static int sigwait(MemorySegment __set, MemorySegment __sig) {
        var mh$ = sigwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwaitinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigwaitinfo$MH,"sigwaitinfo");
    }
    /**
     * {@snippet :
     * int sigwaitinfo(const sigset_t* __set, siginfo_t* __info);
     * }
     */
    public static int sigwaitinfo(MemorySegment __set, MemorySegment __info) {
        var mh$ = sigwaitinfo$MH();
        try {
            return (int)mh$.invokeExact(__set, __info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigtimedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigtimedwait$MH,"sigtimedwait");
    }
    /**
     * {@snippet :
     * int sigtimedwait(const sigset_t* __set, siginfo_t* __info, struct timespec* __timeout);
     * }
     */
    public static int sigtimedwait(MemorySegment __set, MemorySegment __info, MemorySegment __timeout) {
        var mh$ = sigtimedwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __info, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigqueue$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigqueue$MH,"sigqueue");
    }
    /**
     * {@snippet :
     * int sigqueue(__pid_t __pid, int __sig, union sigval __val);
     * }
     */
    public static int sigqueue(int __pid, int __sig, MemorySegment __val) {
        var mh$ = sigqueue$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigreturn$MH,"sigreturn");
    }
    /**
     * {@snippet :
     * int sigreturn(struct sigcontext* __scp);
     * }
     */
    public static int sigreturn(MemorySegment __scp) {
        var mh$ = sigreturn$MH();
        try {
            return (int)mh$.invokeExact(__scp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long long greg_t;
     * }
     */
    public static final OfLong greg_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * enum .REG_R8 = 0;
     * }
     */
    public static int REG_R8() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .REG_R9 = 1;
     * }
     */
    public static int REG_R9() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .REG_R10 = 2;
     * }
     */
    public static int REG_R10() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .REG_R11 = 3;
     * }
     */
    public static int REG_R11() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .REG_R12 = 4;
     * }
     */
    public static int REG_R12() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .REG_R13 = 5;
     * }
     */
    public static int REG_R13() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .REG_R14 = 6;
     * }
     */
    public static int REG_R14() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .REG_R15 = 7;
     * }
     */
    public static int REG_R15() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .REG_RDI = 8;
     * }
     */
    public static int REG_RDI() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .REG_RSI = 9;
     * }
     */
    public static int REG_RSI() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .REG_RBP = 10;
     * }
     */
    public static int REG_RBP() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .REG_RBX = 11;
     * }
     */
    public static int REG_RBX() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .REG_RDX = 12;
     * }
     */
    public static int REG_RDX() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .REG_RAX = 13;
     * }
     */
    public static int REG_RAX() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .REG_RCX = 14;
     * }
     */
    public static int REG_RCX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .REG_RSP = 15;
     * }
     */
    public static int REG_RSP() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .REG_RIP = 16;
     * }
     */
    public static int REG_RIP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .REG_EFL = 17;
     * }
     */
    public static int REG_EFL() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .REG_CSGSFS = 18;
     * }
     */
    public static int REG_CSGSFS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .REG_ERR = 19;
     * }
     */
    public static int REG_ERR() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .REG_TRAPNO = 20;
     * }
     */
    public static int REG_TRAPNO() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .REG_OLDMASK = 21;
     * }
     */
    public static int REG_OLDMASK() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .REG_CR2 = 22;
     * }
     */
    public static int REG_CR2() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * typedef struct _libc_fpstate* fpregset_t;
     * }
     */
    public static final OfAddress fpregset_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle siginterrupt$MH() {
        return RuntimeHelper.requireNonNull(constants$17.siginterrupt$MH,"siginterrupt");
    }
    /**
     * {@snippet :
     * int siginterrupt(int __sig, int __interrupt);
     * }
     */
    public static int siginterrupt(int __sig, int __interrupt) {
        var mh$ = siginterrupt$MH();
        try {
            return (int)mh$.invokeExact(__sig, __interrupt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$17.access$MH,"access");
    }
    /**
     * {@snippet :
     * int access(char* __name, int __type);
     * }
     */
    public static int access(MemorySegment __name, int __type) {
        var mh$ = access$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle euidaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$17.euidaccess$MH,"euidaccess");
    }
    /**
     * {@snippet :
     * int euidaccess(char* __name, int __type);
     * }
     */
    public static int euidaccess(MemorySegment __name, int __type) {
        var mh$ = euidaccess$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$17.eaccess$MH,"eaccess");
    }
    /**
     * {@snippet :
     * int eaccess(char* __name, int __type);
     * }
     */
    public static int eaccess(MemorySegment __name, int __type) {
        var mh$ = eaccess$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execveat$MH() {
        return RuntimeHelper.requireNonNull(constants$17.execveat$MH,"execveat");
    }
    /**
     * {@snippet :
     * int execveat(int __fd, char* __path, char* __argv[], char* __envp[], int __flags);
     * }
     */
    public static int execveat(int __fd, MemorySegment __path, MemorySegment __argv, MemorySegment __envp, int __flags) {
        var mh$ = execveat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __argv, __envp, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$17.faccessat$MH,"faccessat");
    }
    /**
     * {@snippet :
     * int faccessat(int __fd, char* __file, int __type, int __flag);
     * }
     */
    public static int faccessat(int __fd, MemorySegment __file, int __type, int __flag) {
        var mh$ = faccessat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __type, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$18.lseek$MH,"lseek");
    }
    /**
     * {@snippet :
     * __off_t lseek(int __fd, __off_t __offset, int __whence);
     * }
     */
    public static long lseek(int __fd, long __offset, int __whence) {
        var mh$ = lseek$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek64$MH() {
        return RuntimeHelper.requireNonNull(constants$18.lseek64$MH,"lseek64");
    }
    /**
     * {@snippet :
     * __off64_t lseek64(int __fd, __off64_t __offset, int __whence);
     * }
     */
    public static long lseek64(int __fd, long __offset, int __whence) {
        var mh$ = lseek64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$18.close$MH,"close");
    }
    /**
     * {@snippet :
     * int close(int __fd);
     * }
     */
    public static int close(int __fd) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closefrom$MH() {
        return RuntimeHelper.requireNonNull(constants$18.closefrom$MH,"closefrom");
    }
    /**
     * {@snippet :
     * void closefrom(int __lowfd);
     * }
     */
    public static void closefrom(int __lowfd) {
        var mh$ = closefrom$MH();
        try {
            mh$.invokeExact(__lowfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$18.read$MH,"read");
    }
    /**
     * {@snippet :
     * ssize_t read(int __fd, void* __buf, size_t __nbytes);
     * }
     */
    public static long read(int __fd, MemorySegment __buf, long __nbytes) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$18.write$MH,"write");
    }
    /**
     * {@snippet :
     * ssize_t write(int __fd, void* __buf, size_t __n);
     * }
     */
    public static long write(int __fd, MemorySegment __buf, long __n) {
        var mh$ = write$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread$MH() {
        return RuntimeHelper.requireNonNull(constants$19.pread$MH,"pread");
    }
    /**
     * {@snippet :
     * ssize_t pread(int __fd, void* __buf, size_t __nbytes, __off_t __offset);
     * }
     */
    public static long pread(int __fd, MemorySegment __buf, long __nbytes, long __offset) {
        var mh$ = pread$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$19.pwrite$MH,"pwrite");
    }
    /**
     * {@snippet :
     * ssize_t pwrite(int __fd, void* __buf, size_t __n, __off_t __offset);
     * }
     */
    public static long pwrite(int __fd, MemorySegment __buf, long __n, long __offset) {
        var mh$ = pwrite$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread64$MH() {
        return RuntimeHelper.requireNonNull(constants$19.pread64$MH,"pread64");
    }
    /**
     * {@snippet :
     * ssize_t pread64(int __fd, void* __buf, size_t __nbytes, __off64_t __offset);
     * }
     */
    public static long pread64(int __fd, MemorySegment __buf, long __nbytes, long __offset) {
        var mh$ = pread64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite64$MH() {
        return RuntimeHelper.requireNonNull(constants$19.pwrite64$MH,"pwrite64");
    }
    /**
     * {@snippet :
     * ssize_t pwrite64(int __fd, void* __buf, size_t __n, __off64_t __offset);
     * }
     */
    public static long pwrite64(int __fd, MemorySegment __buf, long __n, long __offset) {
        var mh$ = pwrite64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$19.pipe$MH,"pipe");
    }
    /**
     * {@snippet :
     * int pipe(int __pipedes[2]);
     * }
     */
    public static int pipe(MemorySegment __pipedes) {
        var mh$ = pipe$MH();
        try {
            return (int)mh$.invokeExact(__pipedes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe2$MH() {
        return RuntimeHelper.requireNonNull(constants$19.pipe2$MH,"pipe2");
    }
    /**
     * {@snippet :
     * int pipe2(int __pipedes[2], int __flags);
     * }
     */
    public static int pipe2(MemorySegment __pipedes, int __flags) {
        var mh$ = pipe2$MH();
        try {
            return (int)mh$.invokeExact(__pipedes, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$20.alarm$MH,"alarm");
    }
    /**
     * {@snippet :
     * unsigned int alarm(unsigned int __seconds);
     * }
     */
    public static int alarm(int __seconds) {
        var mh$ = alarm$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$20.sleep$MH,"sleep");
    }
    /**
     * {@snippet :
     * unsigned int sleep(unsigned int __seconds);
     * }
     */
    public static int sleep(int __seconds) {
        var mh$ = sleep$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ualarm$MH() {
        return RuntimeHelper.requireNonNull(constants$20.ualarm$MH,"ualarm");
    }
    /**
     * {@snippet :
     * __useconds_t ualarm(__useconds_t __value, __useconds_t __interval);
     * }
     */
    public static int ualarm(int __value, int __interval) {
        var mh$ = ualarm$MH();
        try {
            return (int)mh$.invokeExact(__value, __interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$20.usleep$MH,"usleep");
    }
    /**
     * {@snippet :
     * int usleep(__useconds_t __useconds);
     * }
     */
    public static int usleep(int __useconds) {
        var mh$ = usleep$MH();
        try {
            return (int)mh$.invokeExact(__useconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$20.pause$MH,"pause");
    }
    /**
     * {@snippet :
     * int pause();
     * }
     */
    public static int pause() {
        var mh$ = pause$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$20.chown$MH,"chown");
    }
    /**
     * {@snippet :
     * int chown(char* __file, __uid_t __owner, __gid_t __group);
     * }
     */
    public static int chown(MemorySegment __file, int __owner, int __group) {
        var mh$ = chown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchown$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fchown$MH,"fchown");
    }
    /**
     * {@snippet :
     * int fchown(int __fd, __uid_t __owner, __gid_t __group);
     * }
     */
    public static int fchown(int __fd, int __owner, int __group) {
        var mh$ = fchown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchown$MH() {
        return RuntimeHelper.requireNonNull(constants$21.lchown$MH,"lchown");
    }
    /**
     * {@snippet :
     * int lchown(char* __file, __uid_t __owner, __gid_t __group);
     * }
     */
    public static int lchown(MemorySegment __file, int __owner, int __group) {
        var mh$ = lchown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fchownat$MH,"fchownat");
    }
    /**
     * {@snippet :
     * int fchownat(int __fd, char* __file, __uid_t __owner, __gid_t __group, int __flag);
     * }
     */
    public static int fchownat(int __fd, MemorySegment __file, int __owner, int __group, int __flag) {
        var mh$ = fchownat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __owner, __group, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$21.chdir$MH,"chdir");
    }
    /**
     * {@snippet :
     * int chdir(char* __path);
     * }
     */
    public static int chdir(MemorySegment __path) {
        var mh$ = chdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchdir$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fchdir$MH,"fchdir");
    }
    /**
     * {@snippet :
     * int fchdir(int __fd);
     * }
     */
    public static int fchdir(int __fd) {
        var mh$ = fchdir$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$21.getcwd$MH,"getcwd");
    }
    /**
     * {@snippet :
     * char* getcwd(char* __buf, size_t __size);
     * }
     */
    public static MemorySegment getcwd(MemorySegment __buf, long __size) {
        var mh$ = getcwd$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle get_current_dir_name$MH() {
        return RuntimeHelper.requireNonNull(constants$22.get_current_dir_name$MH,"get_current_dir_name");
    }
    /**
     * {@snippet :
     * char* get_current_dir_name();
     * }
     */
    public static MemorySegment get_current_dir_name() {
        var mh$ = get_current_dir_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwd$MH() {
        return RuntimeHelper.requireNonNull(constants$22.getwd$MH,"getwd");
    }
    /**
     * {@snippet :
     * char* getwd(char* __buf);
     * }
     */
    public static MemorySegment getwd(MemorySegment __buf) {
        var mh$ = getwd$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$22.dup$MH,"dup");
    }
    /**
     * {@snippet :
     * int dup(int __fd);
     * }
     */
    public static int dup(int __fd) {
        var mh$ = dup$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$22.dup2$MH,"dup2");
    }
    /**
     * {@snippet :
     * int dup2(int __fd, int __fd2);
     * }
     */
    public static int dup2(int __fd, int __fd2) {
        var mh$ = dup2$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fd2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup3$MH() {
        return RuntimeHelper.requireNonNull(constants$22.dup3$MH,"dup3");
    }
    /**
     * {@snippet :
     * int dup3(int __fd, int __fd2, int __flags);
     * }
     */
    public static int dup3(int __fd, int __fd2, int __flags) {
        var mh$ = dup3$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fd2, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __environ$LAYOUT() {
        return constants$22.__environ$LAYOUT;
    }
    public static VarHandle __environ$VH() {
        return constants$22.__environ$VH;
    }
    public static MemorySegment __environ$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.__environ$SEGMENT,"__environ");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char** __environ;
     * }
     */
    public static MemorySegment __environ$get() {
        return (java.lang.foreign.MemorySegment) constants$22.__environ$VH.get(RuntimeHelper.requireNonNull(constants$22.__environ$SEGMENT, "__environ"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char** __environ;
     * }
     */
    public static void __environ$set(MemorySegment x) {
        constants$22.__environ$VH.set(RuntimeHelper.requireNonNull(constants$22.__environ$SEGMENT, "__environ"), x);
    }
    public static MemoryLayout environ$LAYOUT() {
        return constants$23.environ$LAYOUT;
    }
    public static VarHandle environ$VH() {
        return constants$23.environ$VH;
    }
    public static MemorySegment environ$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.environ$SEGMENT,"environ");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char** environ;
     * }
     */
    public static MemorySegment environ$get() {
        return (java.lang.foreign.MemorySegment) constants$23.environ$VH.get(RuntimeHelper.requireNonNull(constants$23.environ$SEGMENT, "environ"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char** environ;
     * }
     */
    public static void environ$set(MemorySegment x) {
        constants$23.environ$VH.set(RuntimeHelper.requireNonNull(constants$23.environ$SEGMENT, "environ"), x);
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$23.execve$MH,"execve");
    }
    /**
     * {@snippet :
     * int execve(char* __path, char* __argv[], char* __envp[]);
     * }
     */
    public static int execve(MemorySegment __path, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = execve$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fexecve$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fexecve$MH,"fexecve");
    }
    /**
     * {@snippet :
     * int fexecve(int __fd, char* __argv[], char* __envp[]);
     * }
     */
    public static int fexecve(int __fd, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = fexecve$MH();
        try {
            return (int)mh$.invokeExact(__fd, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.execv$MH,"execv");
    }
    /**
     * {@snippet :
     * int execv(char* __path, char* __argv[]);
     * }
     */
    public static int execv(MemorySegment __path, MemorySegment __argv) {
        var mh$ = execv$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$23.execle$MH,"execle");
    }
    /**
     * {@snippet :
     * int execle(char* __path, char* __arg,...);
     * }
     */
    public static int execle(MemorySegment __path, MemorySegment __arg, Object... x2) {
        var mh$ = execle$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$23.execl$MH,"execl");
    }
    /**
     * {@snippet :
     * int execl(char* __path, char* __arg,...);
     * }
     */
    public static int execl(MemorySegment __path, MemorySegment __arg, Object... x2) {
        var mh$ = execl$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$24.execvp$MH,"execvp");
    }
    /**
     * {@snippet :
     * int execvp(char* __file, char* __argv[]);
     * }
     */
    public static int execvp(MemorySegment __file, MemorySegment __argv) {
        var mh$ = execvp$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$24.execlp$MH,"execlp");
    }
    /**
     * {@snippet :
     * int execlp(char* __file, char* __arg,...);
     * }
     */
    public static int execlp(MemorySegment __file, MemorySegment __arg, Object... x2) {
        var mh$ = execlp$MH();
        try {
            return (int)mh$.invokeExact(__file, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvpe$MH() {
        return RuntimeHelper.requireNonNull(constants$24.execvpe$MH,"execvpe");
    }
    /**
     * {@snippet :
     * int execvpe(char* __file, char* __argv[], char* __envp[]);
     * }
     */
    public static int execvpe(MemorySegment __file, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = execvpe$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nice$MH() {
        return RuntimeHelper.requireNonNull(constants$24.nice$MH,"nice");
    }
    /**
     * {@snippet :
     * int nice(int __inc);
     * }
     */
    public static int nice(int __inc) {
        var mh$ = nice$MH();
        try {
            return (int)mh$.invokeExact(__inc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$24._exit$MH,"_exit");
    }
    /**
     * {@snippet :
     * void _exit(int __status);
     * }
     */
    public static void _exit(int __status) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ._PC_LINK_MAX = 0;
     * }
     */
    public static int _PC_LINK_MAX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ._PC_MAX_CANON = 1;
     * }
     */
    public static int _PC_MAX_CANON() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._PC_MAX_INPUT = 2;
     * }
     */
    public static int _PC_MAX_INPUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._PC_NAME_MAX = 3;
     * }
     */
    public static int _PC_NAME_MAX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ._PC_PATH_MAX = 4;
     * }
     */
    public static int _PC_PATH_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._PC_PIPE_BUF = 5;
     * }
     */
    public static int _PC_PIPE_BUF() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ._PC_CHOWN_RESTRICTED = 6;
     * }
     */
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ._PC_NO_TRUNC = 7;
     * }
     */
    public static int _PC_NO_TRUNC() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ._PC_VDISABLE = 8;
     * }
     */
    public static int _PC_VDISABLE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ._PC_SYNC_IO = 9;
     * }
     */
    public static int _PC_SYNC_IO() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ._PC_ASYNC_IO = 10;
     * }
     */
    public static int _PC_ASYNC_IO() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ._PC_PRIO_IO = 11;
     * }
     */
    public static int _PC_PRIO_IO() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ._PC_SOCK_MAXBUF = 12;
     * }
     */
    public static int _PC_SOCK_MAXBUF() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ._PC_FILESIZEBITS = 13;
     * }
     */
    public static int _PC_FILESIZEBITS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_INCR_XFER_SIZE = 14;
     * }
     */
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_MAX_XFER_SIZE = 15;
     * }
     */
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_MIN_XFER_SIZE = 16;
     * }
     */
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_XFER_ALIGN = 17;
     * }
     */
    public static int _PC_REC_XFER_ALIGN() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum ._PC_ALLOC_SIZE_MIN = 18;
     * }
     */
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum ._PC_SYMLINK_MAX = 19;
     * }
     */
    public static int _PC_SYMLINK_MAX() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum ._PC_2_SYMLINKS = 20;
     * }
     */
    public static int _PC_2_SYMLINKS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum ._SC_ARG_MAX = 0;
     * }
     */
    public static int _SC_ARG_MAX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHILD_MAX = 1;
     * }
     */
    public static int _SC_CHILD_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._SC_CLK_TCK = 2;
     * }
     */
    public static int _SC_CLK_TCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._SC_NGROUPS_MAX = 3;
     * }
     */
    public static int _SC_NGROUPS_MAX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ._SC_OPEN_MAX = 4;
     * }
     */
    public static int _SC_OPEN_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._SC_STREAM_MAX = 5;
     * }
     */
    public static int _SC_STREAM_MAX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ._SC_TZNAME_MAX = 6;
     * }
     */
    public static int _SC_TZNAME_MAX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ._SC_JOB_CONTROL = 7;
     * }
     */
    public static int _SC_JOB_CONTROL() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ._SC_SAVED_IDS = 8;
     * }
     */
    public static int _SC_SAVED_IDS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ._SC_REALTIME_SIGNALS = 9;
     * }
     */
    public static int _SC_REALTIME_SIGNALS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ._SC_PRIORITY_SCHEDULING = 10;
     * }
     */
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ._SC_TIMERS = 11;
     * }
     */
    public static int _SC_TIMERS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ._SC_ASYNCHRONOUS_IO = 12;
     * }
     */
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ._SC_PRIORITIZED_IO = 13;
     * }
     */
    public static int _SC_PRIORITIZED_IO() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYNCHRONIZED_IO = 14;
     * }
     */
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ._SC_FSYNC = 15;
     * }
     */
    public static int _SC_FSYNC() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum ._SC_MAPPED_FILES = 16;
     * }
     */
    public static int _SC_MAPPED_FILES() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum ._SC_MEMLOCK = 17;
     * }
     */
    public static int _SC_MEMLOCK() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum ._SC_MEMLOCK_RANGE = 18;
     * }
     */
    public static int _SC_MEMLOCK_RANGE() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum ._SC_MEMORY_PROTECTION = 19;
     * }
     */
    public static int _SC_MEMORY_PROTECTION() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum ._SC_MESSAGE_PASSING = 20;
     * }
     */
    public static int _SC_MESSAGE_PASSING() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum ._SC_SEMAPHORES = 21;
     * }
     */
    public static int _SC_SEMAPHORES() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHARED_MEMORY_OBJECTS = 22;
     * }
     */
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum ._SC_AIO_LISTIO_MAX = 23;
     * }
     */
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum ._SC_AIO_MAX = 24;
     * }
     */
    public static int _SC_AIO_MAX() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum ._SC_AIO_PRIO_DELTA_MAX = 25;
     * }
     */
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum ._SC_DELAYTIMER_MAX = 26;
     * }
     */
    public static int _SC_DELAYTIMER_MAX() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum ._SC_MQ_OPEN_MAX = 27;
     * }
     */
    public static int _SC_MQ_OPEN_MAX() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum ._SC_MQ_PRIO_MAX = 28;
     * }
     */
    public static int _SC_MQ_PRIO_MAX() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum ._SC_VERSION = 29;
     * }
     */
    public static int _SC_VERSION() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum ._SC_PAGESIZE = 30;
     * }
     */
    public static int _SC_PAGESIZE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum ._SC_RTSIG_MAX = 31;
     * }
     */
    public static int _SC_RTSIG_MAX() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum ._SC_SEM_NSEMS_MAX = 32;
     * }
     */
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum ._SC_SEM_VALUE_MAX = 33;
     * }
     */
    public static int _SC_SEM_VALUE_MAX() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum ._SC_SIGQUEUE_MAX = 34;
     * }
     */
    public static int _SC_SIGQUEUE_MAX() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum ._SC_TIMER_MAX = 35;
     * }
     */
    public static int _SC_TIMER_MAX() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_BASE_MAX = 36;
     * }
     */
    public static int _SC_BC_BASE_MAX() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_DIM_MAX = 37;
     * }
     */
    public static int _SC_BC_DIM_MAX() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_SCALE_MAX = 38;
     * }
     */
    public static int _SC_BC_SCALE_MAX() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_STRING_MAX = 39;
     * }
     */
    public static int _SC_BC_STRING_MAX() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum ._SC_COLL_WEIGHTS_MAX = 40;
     * }
     */
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum ._SC_EQUIV_CLASS_MAX = 41;
     * }
     */
    public static int _SC_EQUIV_CLASS_MAX() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum ._SC_EXPR_NEST_MAX = 42;
     * }
     */
    public static int _SC_EXPR_NEST_MAX() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum ._SC_LINE_MAX = 43;
     * }
     */
    public static int _SC_LINE_MAX() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum ._SC_RE_DUP_MAX = 44;
     * }
     */
    public static int _SC_RE_DUP_MAX() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHARCLASS_NAME_MAX = 45;
     * }
     */
    public static int _SC_CHARCLASS_NAME_MAX() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_VERSION = 46;
     * }
     */
    public static int _SC_2_VERSION() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_C_BIND = 47;
     * }
     */
    public static int _SC_2_C_BIND() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_C_DEV = 48;
     * }
     */
    public static int _SC_2_C_DEV() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_FORT_DEV = 49;
     * }
     */
    public static int _SC_2_FORT_DEV() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_FORT_RUN = 50;
     * }
     */
    public static int _SC_2_FORT_RUN() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_SW_DEV = 51;
     * }
     */
    public static int _SC_2_SW_DEV() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_LOCALEDEF = 52;
     * }
     */
    public static int _SC_2_LOCALEDEF() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII = 53;
     * }
     */
    public static int _SC_PII() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_XTI = 54;
     * }
     */
    public static int _SC_PII_XTI() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_SOCKET = 55;
     * }
     */
    public static int _SC_PII_SOCKET() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_INTERNET = 56;
     * }
     */
    public static int _SC_PII_INTERNET() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI = 57;
     * }
     */
    public static int _SC_PII_OSI() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum ._SC_POLL = 58;
     * }
     */
    public static int _SC_POLL() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum ._SC_SELECT = 59;
     * }
     */
    public static int _SC_SELECT() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum ._SC_UIO_MAXIOV = 60;
     * }
     */
    public static int _SC_UIO_MAXIOV() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum ._SC_IOV_MAX = 60;
     * }
     */
    public static int _SC_IOV_MAX() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_INTERNET_STREAM = 61;
     * }
     */
    public static int _SC_PII_INTERNET_STREAM() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_INTERNET_DGRAM = 62;
     * }
     */
    public static int _SC_PII_INTERNET_DGRAM() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI_COTS = 63;
     * }
     */
    public static int _SC_PII_OSI_COTS() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI_CLTS = 64;
     * }
     */
    public static int _SC_PII_OSI_CLTS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI_M = 65;
     * }
     */
    public static int _SC_PII_OSI_M() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum ._SC_T_IOV_MAX = 66;
     * }
     */
    public static int _SC_T_IOV_MAX() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREADS = 67;
     * }
     */
    public static int _SC_THREADS() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_SAFE_FUNCTIONS = 68;
     * }
     */
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum ._SC_GETGR_R_SIZE_MAX = 69;
     * }
     */
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum ._SC_GETPW_R_SIZE_MAX = 70;
     * }
     */
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum ._SC_LOGIN_NAME_MAX = 71;
     * }
     */
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum ._SC_TTY_NAME_MAX = 72;
     * }
     */
    public static int _SC_TTY_NAME_MAX() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_DESTRUCTOR_ITERATIONS = 73;
     * }
     */
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_KEYS_MAX = 74;
     * }
     */
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_STACK_MIN = 75;
     * }
     */
    public static int _SC_THREAD_STACK_MIN() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_THREADS_MAX = 76;
     * }
     */
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ATTR_STACKADDR = 77;
     * }
     */
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ATTR_STACKSIZE = 78;
     * }
     */
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PRIORITY_SCHEDULING = 79;
     * }
     */
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PRIO_INHERIT = 80;
     * }
     */
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PRIO_PROTECT = 81;
     * }
     */
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PROCESS_SHARED = 82;
     * }
     */
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum ._SC_NPROCESSORS_CONF = 83;
     * }
     */
    public static int _SC_NPROCESSORS_CONF() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum ._SC_NPROCESSORS_ONLN = 84;
     * }
     */
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * enum ._SC_PHYS_PAGES = 85;
     * }
     */
    public static int _SC_PHYS_PAGES() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * enum ._SC_AVPHYS_PAGES = 86;
     * }
     */
    public static int _SC_AVPHYS_PAGES() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * enum ._SC_ATEXIT_MAX = 87;
     * }
     */
    public static int _SC_ATEXIT_MAX() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum ._SC_PASS_MAX = 88;
     * }
     */
    public static int _SC_PASS_MAX() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_VERSION = 89;
     * }
     */
    public static int _SC_XOPEN_VERSION() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XCU_VERSION = 90;
     * }
     */
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_UNIX = 91;
     * }
     */
    public static int _SC_XOPEN_UNIX() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_CRYPT = 92;
     * }
     */
    public static int _SC_XOPEN_CRYPT() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_ENH_I18N = 93;
     * }
     */
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_SHM = 94;
     * }
     */
    public static int _SC_XOPEN_SHM() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_CHAR_TERM = 95;
     * }
     */
    public static int _SC_2_CHAR_TERM() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_C_VERSION = 96;
     * }
     */
    public static int _SC_2_C_VERSION() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_UPE = 97;
     * }
     */
    public static int _SC_2_UPE() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XPG2 = 98;
     * }
     */
    public static int _SC_XOPEN_XPG2() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XPG3 = 99;
     * }
     */
    public static int _SC_XOPEN_XPG3() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XPG4 = 100;
     * }
     */
    public static int _SC_XOPEN_XPG4() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHAR_BIT = 101;
     * }
     */
    public static int _SC_CHAR_BIT() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHAR_MAX = 102;
     * }
     */
    public static int _SC_CHAR_MAX() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHAR_MIN = 103;
     * }
     */
    public static int _SC_CHAR_MIN() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum ._SC_INT_MAX = 104;
     * }
     */
    public static int _SC_INT_MAX() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum ._SC_INT_MIN = 105;
     * }
     */
    public static int _SC_INT_MIN() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum ._SC_LONG_BIT = 106;
     * }
     */
    public static int _SC_LONG_BIT() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum ._SC_WORD_BIT = 107;
     * }
     */
    public static int _SC_WORD_BIT() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum ._SC_MB_LEN_MAX = 108;
     * }
     */
    public static int _SC_MB_LEN_MAX() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum ._SC_NZERO = 109;
     * }
     */
    public static int _SC_NZERO() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * enum ._SC_SSIZE_MAX = 110;
     * }
     */
    public static int _SC_SSIZE_MAX() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * enum ._SC_SCHAR_MAX = 111;
     * }
     */
    public static int _SC_SCHAR_MAX() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * enum ._SC_SCHAR_MIN = 112;
     * }
     */
    public static int _SC_SCHAR_MIN() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHRT_MAX = 113;
     * }
     */
    public static int _SC_SHRT_MAX() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHRT_MIN = 114;
     * }
     */
    public static int _SC_SHRT_MIN() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * enum ._SC_UCHAR_MAX = 115;
     * }
     */
    public static int _SC_UCHAR_MAX() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum ._SC_UINT_MAX = 116;
     * }
     */
    public static int _SC_UINT_MAX() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * enum ._SC_ULONG_MAX = 117;
     * }
     */
    public static int _SC_ULONG_MAX() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * enum ._SC_USHRT_MAX = 118;
     * }
     */
    public static int _SC_USHRT_MAX() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_ARGMAX = 119;
     * }
     */
    public static int _SC_NL_ARGMAX() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_LANGMAX = 120;
     * }
     */
    public static int _SC_NL_LANGMAX() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_MSGMAX = 121;
     * }
     */
    public static int _SC_NL_MSGMAX() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_NMAX = 122;
     * }
     */
    public static int _SC_NL_NMAX() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_SETMAX = 123;
     * }
     */
    public static int _SC_NL_SETMAX() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_TEXTMAX = 124;
     * }
     */
    public static int _SC_NL_TEXTMAX() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_ILP32_OFF32 = 125;
     * }
     */
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_ILP32_OFFBIG = 126;
     * }
     */
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_LP64_OFF64 = 127;
     * }
     */
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_LPBIG_OFFBIG = 128;
     * }
     */
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_LEGACY = 129;
     * }
     */
    public static int _SC_XOPEN_LEGACY() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_REALTIME = 130;
     * }
     */
    public static int _SC_XOPEN_REALTIME() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_REALTIME_THREADS = 131;
     * }
     */
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * enum ._SC_ADVISORY_INFO = 132;
     * }
     */
    public static int _SC_ADVISORY_INFO() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * enum ._SC_BARRIERS = 133;
     * }
     */
    public static int _SC_BARRIERS() {
        return (int)133L;
    }
    /**
     * {@snippet :
     * enum ._SC_BASE = 134;
     * }
     */
    public static int _SC_BASE() {
        return (int)134L;
    }
    /**
     * {@snippet :
     * enum ._SC_C_LANG_SUPPORT = 135;
     * }
     */
    public static int _SC_C_LANG_SUPPORT() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * enum ._SC_C_LANG_SUPPORT_R = 136;
     * }
     */
    public static int _SC_C_LANG_SUPPORT_R() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * enum ._SC_CLOCK_SELECTION = 137;
     * }
     */
    public static int _SC_CLOCK_SELECTION() {
        return (int)137L;
    }
    /**
     * {@snippet :
     * enum ._SC_CPUTIME = 138;
     * }
     */
    public static int _SC_CPUTIME() {
        return (int)138L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_CPUTIME = 139;
     * }
     */
    public static int _SC_THREAD_CPUTIME() {
        return (int)139L;
    }
    /**
     * {@snippet :
     * enum ._SC_DEVICE_IO = 140;
     * }
     */
    public static int _SC_DEVICE_IO() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * enum ._SC_DEVICE_SPECIFIC = 141;
     * }
     */
    public static int _SC_DEVICE_SPECIFIC() {
        return (int)141L;
    }
    /**
     * {@snippet :
     * enum ._SC_DEVICE_SPECIFIC_R = 142;
     * }
     */
    public static int _SC_DEVICE_SPECIFIC_R() {
        return (int)142L;
    }
    /**
     * {@snippet :
     * enum ._SC_FD_MGMT = 143;
     * }
     */
    public static int _SC_FD_MGMT() {
        return (int)143L;
    }
    /**
     * {@snippet :
     * enum ._SC_FIFO = 144;
     * }
     */
    public static int _SC_FIFO() {
        return (int)144L;
    }
    /**
     * {@snippet :
     * enum ._SC_PIPE = 145;
     * }
     */
    public static int _SC_PIPE() {
        return (int)145L;
    }
    /**
     * {@snippet :
     * enum ._SC_FILE_ATTRIBUTES = 146;
     * }
     */
    public static int _SC_FILE_ATTRIBUTES() {
        return (int)146L;
    }
    /**
     * {@snippet :
     * enum ._SC_FILE_LOCKING = 147;
     * }
     */
    public static int _SC_FILE_LOCKING() {
        return (int)147L;
    }
    /**
     * {@snippet :
     * enum ._SC_FILE_SYSTEM = 148;
     * }
     */
    public static int _SC_FILE_SYSTEM() {
        return (int)148L;
    }
    /**
     * {@snippet :
     * enum ._SC_MONOTONIC_CLOCK = 149;
     * }
     */
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)149L;
    }
    /**
     * {@snippet :
     * enum ._SC_MULTI_PROCESS = 150;
     * }
     */
    public static int _SC_MULTI_PROCESS() {
        return (int)150L;
    }
    /**
     * {@snippet :
     * enum ._SC_SINGLE_PROCESS = 151;
     * }
     */
    public static int _SC_SINGLE_PROCESS() {
        return (int)151L;
    }
    /**
     * {@snippet :
     * enum ._SC_NETWORKING = 152;
     * }
     */
    public static int _SC_NETWORKING() {
        return (int)152L;
    }
    /**
     * {@snippet :
     * enum ._SC_READER_WRITER_LOCKS = 153;
     * }
     */
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)153L;
    }
    /**
     * {@snippet :
     * enum ._SC_SPIN_LOCKS = 154;
     * }
     */
    public static int _SC_SPIN_LOCKS() {
        return (int)154L;
    }
    /**
     * {@snippet :
     * enum ._SC_REGEXP = 155;
     * }
     */
    public static int _SC_REGEXP() {
        return (int)155L;
    }
    /**
     * {@snippet :
     * enum ._SC_REGEX_VERSION = 156;
     * }
     */
    public static int _SC_REGEX_VERSION() {
        return (int)156L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHELL = 157;
     * }
     */
    public static int _SC_SHELL() {
        return (int)157L;
    }
    /**
     * {@snippet :
     * enum ._SC_SIGNALS = 158;
     * }
     */
    public static int _SC_SIGNALS() {
        return (int)158L;
    }
    /**
     * {@snippet :
     * enum ._SC_SPAWN = 159;
     * }
     */
    public static int _SC_SPAWN() {
        return (int)159L;
    }
    /**
     * {@snippet :
     * enum ._SC_SPORADIC_SERVER = 160;
     * }
     */
    public static int _SC_SPORADIC_SERVER() {
        return (int)160L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_SPORADIC_SERVER = 161;
     * }
     */
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)161L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYSTEM_DATABASE = 162;
     * }
     */
    public static int _SC_SYSTEM_DATABASE() {
        return (int)162L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYSTEM_DATABASE_R = 163;
     * }
     */
    public static int _SC_SYSTEM_DATABASE_R() {
        return (int)163L;
    }
    /**
     * {@snippet :
     * enum ._SC_TIMEOUTS = 164;
     * }
     */
    public static int _SC_TIMEOUTS() {
        return (int)164L;
    }
    /**
     * {@snippet :
     * enum ._SC_TYPED_MEMORY_OBJECTS = 165;
     * }
     */
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)165L;
    }
    /**
     * {@snippet :
     * enum ._SC_USER_GROUPS = 166;
     * }
     */
    public static int _SC_USER_GROUPS() {
        return (int)166L;
    }
    /**
     * {@snippet :
     * enum ._SC_USER_GROUPS_R = 167;
     * }
     */
    public static int _SC_USER_GROUPS_R() {
        return (int)167L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS = 168;
     * }
     */
    public static int _SC_2_PBS() {
        return (int)168L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_ACCOUNTING = 169;
     * }
     */
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)169L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_LOCATE = 170;
     * }
     */
    public static int _SC_2_PBS_LOCATE() {
        return (int)170L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_MESSAGE = 171;
     * }
     */
    public static int _SC_2_PBS_MESSAGE() {
        return (int)171L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_TRACK = 172;
     * }
     */
    public static int _SC_2_PBS_TRACK() {
        return (int)172L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYMLOOP_MAX = 173;
     * }
     */
    public static int _SC_SYMLOOP_MAX() {
        return (int)173L;
    }
    /**
     * {@snippet :
     * enum ._SC_STREAMS = 174;
     * }
     */
    public static int _SC_STREAMS() {
        return (int)174L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_CHECKPOINT = 175;
     * }
     */
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)175L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_ILP32_OFF32 = 176;
     * }
     */
    public static int _SC_V6_ILP32_OFF32() {
        return (int)176L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_ILP32_OFFBIG = 177;
     * }
     */
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)177L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_LP64_OFF64 = 178;
     * }
     */
    public static int _SC_V6_LP64_OFF64() {
        return (int)178L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_LPBIG_OFFBIG = 179;
     * }
     */
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)179L;
    }
    /**
     * {@snippet :
     * enum ._SC_HOST_NAME_MAX = 180;
     * }
     */
    public static int _SC_HOST_NAME_MAX() {
        return (int)180L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE = 181;
     * }
     */
    public static int _SC_TRACE() {
        return (int)181L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_EVENT_FILTER = 182;
     * }
     */
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)182L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_INHERIT = 183;
     * }
     */
    public static int _SC_TRACE_INHERIT() {
        return (int)183L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_LOG = 184;
     * }
     */
    public static int _SC_TRACE_LOG() {
        return (int)184L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_ICACHE_SIZE = 185;
     * }
     */
    public static int _SC_LEVEL1_ICACHE_SIZE() {
        return (int)185L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_ICACHE_ASSOC = 186;
     * }
     */
    public static int _SC_LEVEL1_ICACHE_ASSOC() {
        return (int)186L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_ICACHE_LINESIZE = 187;
     * }
     */
    public static int _SC_LEVEL1_ICACHE_LINESIZE() {
        return (int)187L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_DCACHE_SIZE = 188;
     * }
     */
    public static int _SC_LEVEL1_DCACHE_SIZE() {
        return (int)188L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_DCACHE_ASSOC = 189;
     * }
     */
    public static int _SC_LEVEL1_DCACHE_ASSOC() {
        return (int)189L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_DCACHE_LINESIZE = 190;
     * }
     */
    public static int _SC_LEVEL1_DCACHE_LINESIZE() {
        return (int)190L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL2_CACHE_SIZE = 191;
     * }
     */
    public static int _SC_LEVEL2_CACHE_SIZE() {
        return (int)191L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL2_CACHE_ASSOC = 192;
     * }
     */
    public static int _SC_LEVEL2_CACHE_ASSOC() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL2_CACHE_LINESIZE = 193;
     * }
     */
    public static int _SC_LEVEL2_CACHE_LINESIZE() {
        return (int)193L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL3_CACHE_SIZE = 194;
     * }
     */
    public static int _SC_LEVEL3_CACHE_SIZE() {
        return (int)194L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL3_CACHE_ASSOC = 195;
     * }
     */
    public static int _SC_LEVEL3_CACHE_ASSOC() {
        return (int)195L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL3_CACHE_LINESIZE = 196;
     * }
     */
    public static int _SC_LEVEL3_CACHE_LINESIZE() {
        return (int)196L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL4_CACHE_SIZE = 197;
     * }
     */
    public static int _SC_LEVEL4_CACHE_SIZE() {
        return (int)197L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL4_CACHE_ASSOC = 198;
     * }
     */
    public static int _SC_LEVEL4_CACHE_ASSOC() {
        return (int)198L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL4_CACHE_LINESIZE = 199;
     * }
     */
    public static int _SC_LEVEL4_CACHE_LINESIZE() {
        return (int)199L;
    }
    /**
     * {@snippet :
     * enum ._SC_IPV6 = 235;
     * }
     */
    public static int _SC_IPV6() {
        return (int)235L;
    }
    /**
     * {@snippet :
     * enum ._SC_RAW_SOCKETS = 236;
     * }
     */
    public static int _SC_RAW_SOCKETS() {
        return (int)236L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_ILP32_OFF32 = 237;
     * }
     */
    public static int _SC_V7_ILP32_OFF32() {
        return (int)237L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_ILP32_OFFBIG = 238;
     * }
     */
    public static int _SC_V7_ILP32_OFFBIG() {
        return (int)238L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_LP64_OFF64 = 239;
     * }
     */
    public static int _SC_V7_LP64_OFF64() {
        return (int)239L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_LPBIG_OFFBIG = 240;
     * }
     */
    public static int _SC_V7_LPBIG_OFFBIG() {
        return (int)240L;
    }
    /**
     * {@snippet :
     * enum ._SC_SS_REPL_MAX = 241;
     * }
     */
    public static int _SC_SS_REPL_MAX() {
        return (int)241L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_EVENT_NAME_MAX = 242;
     * }
     */
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)242L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_NAME_MAX = 243;
     * }
     */
    public static int _SC_TRACE_NAME_MAX() {
        return (int)243L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_SYS_MAX = 244;
     * }
     */
    public static int _SC_TRACE_SYS_MAX() {
        return (int)244L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_USER_EVENT_MAX = 245;
     * }
     */
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)245L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_STREAMS = 246;
     * }
     */
    public static int _SC_XOPEN_STREAMS() {
        return (int)246L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ROBUST_PRIO_INHERIT = 247;
     * }
     */
    public static int _SC_THREAD_ROBUST_PRIO_INHERIT() {
        return (int)247L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ROBUST_PRIO_PROTECT = 248;
     * }
     */
    public static int _SC_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)248L;
    }
    /**
     * {@snippet :
     * enum ._SC_MINSIGSTKSZ = 249;
     * }
     */
    public static int _SC_MINSIGSTKSZ() {
        return (int)249L;
    }
    /**
     * {@snippet :
     * enum ._SC_SIGSTKSZ = 250;
     * }
     */
    public static int _SC_SIGSTKSZ() {
        return (int)250L;
    }
    /**
     * {@snippet :
     * enum ._CS_PATH = 0;
     * }
     */
    public static int _CS_PATH() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ._CS_V6_WIDTH_RESTRICTED_ENVS = 1;
     * }
     */
    public static int _CS_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._CS_GNU_LIBC_VERSION = 2;
     * }
     */
    public static int _CS_GNU_LIBC_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._CS_GNU_LIBPTHREAD_VERSION = 3;
     * }
     */
    public static int _CS_GNU_LIBPTHREAD_VERSION() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ._CS_V5_WIDTH_RESTRICTED_ENVS = 4;
     * }
     */
    public static int _CS_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._CS_V7_WIDTH_RESTRICTED_ENVS = 5;
     * }
     */
    public static int _CS_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_CFLAGS = 1000;
     * }
     */
    public static int _CS_LFS_CFLAGS() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_LDFLAGS = 1001;
     * }
     */
    public static int _CS_LFS_LDFLAGS() {
        return (int)1001L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_LIBS = 1002;
     * }
     */
    public static int _CS_LFS_LIBS() {
        return (int)1002L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_LINTFLAGS = 1003;
     * }
     */
    public static int _CS_LFS_LINTFLAGS() {
        return (int)1003L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_CFLAGS = 1004;
     * }
     */
    public static int _CS_LFS64_CFLAGS() {
        return (int)1004L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_LDFLAGS = 1005;
     * }
     */
    public static int _CS_LFS64_LDFLAGS() {
        return (int)1005L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_LIBS = 1006;
     * }
     */
    public static int _CS_LFS64_LIBS() {
        return (int)1006L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_LINTFLAGS = 1007;
     * }
     */
    public static int _CS_LFS64_LINTFLAGS() {
        return (int)1007L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_CFLAGS = 1100;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)1100L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)1101L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_LIBS = 1102;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)1102L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)1103L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)1104L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)1105L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_LIBS = 1106;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)1106L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1107L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_CFLAGS = 1108;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)1108L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_LDFLAGS = 1109;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)1109L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_LIBS = 1110;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)1110L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)1111L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)1112L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1113L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)1114L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1115L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)1116L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)1117L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)1118L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS() {
        return (int)1119L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)1120L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)1121L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)1122L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1123L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)1124L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)1125L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_LIBS = 1126;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)1126L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS() {
        return (int)1127L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)1128L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1129L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)1130L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1131L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_CFLAGS() {
        return (int)1132L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS() {
        return (int)1133L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LIBS() {
        return (int)1134L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS() {
        return (int)1135L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS() {
        return (int)1136L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS() {
        return (int)1137L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LIBS() {
        return (int)1138L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1139L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_CFLAGS() {
        return (int)1140L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LDFLAGS() {
        return (int)1141L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_LIBS = 1142;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LIBS() {
        return (int)1142L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS() {
        return (int)1143L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS() {
        return (int)1144L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1145L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS() {
        return (int)1146L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1147L;
    }
    /**
     * {@snippet :
     * enum ._CS_V6_ENV = 1148;
     * }
     */
    public static int _CS_V6_ENV() {
        return (int)1148L;
    }
    /**
     * {@snippet :
     * enum ._CS_V7_ENV = 1149;
     * }
     */
    public static int _CS_V7_ENV() {
        return (int)1149L;
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.pathconf$MH,"pathconf");
    }
    /**
     * {@snippet :
     * long pathconf(char* __path, int __name);
     * }
     */
    public static long pathconf(MemorySegment __path, int __name) {
        var mh$ = pathconf$MH();
        try {
            return (long)mh$.invokeExact(__path, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fpathconf$MH,"fpathconf");
    }
    /**
     * {@snippet :
     * long fpathconf(int __fd, int __name);
     * }
     */
    public static long fpathconf(int __fd, int __name) {
        var mh$ = fpathconf$MH();
        try {
            return (long)mh$.invokeExact(__fd, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysconf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.sysconf$MH,"sysconf");
    }
    /**
     * {@snippet :
     * long sysconf(int __name);
     * }
     */
    public static long sysconf(int __name) {
        var mh$ = sysconf$MH();
        try {
            return (long)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle confstr$MH() {
        return RuntimeHelper.requireNonNull(constants$25.confstr$MH,"confstr");
    }
    /**
     * {@snippet :
     * size_t confstr(int __name, char* __buf, size_t __len);
     * }
     */
    public static long confstr(int __name, MemorySegment __buf, long __len) {
        var mh$ = confstr$MH();
        try {
            return (long)mh$.invokeExact(__name, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$25.getpid$MH,"getpid");
    }
    /**
     * {@snippet :
     * __pid_t getpid();
     * }
     */
    public static int getpid() {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$25.getppid$MH,"getppid");
    }
    /**
     * {@snippet :
     * __pid_t getppid();
     * }
     */
    public static int getppid() {
        var mh$ = getppid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$25.getpgrp$MH,"getpgrp");
    }
    /**
     * {@snippet :
     * __pid_t getpgrp();
     * }
     */
    public static int getpgrp() {
        var mh$ = getpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__getpgid$MH,"__getpgid");
    }
    /**
     * {@snippet :
     * __pid_t __getpgid(__pid_t __pid);
     * }
     */
    public static int __getpgid(int __pid) {
        var mh$ = __getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$26.getpgid$MH,"getpgid");
    }
    /**
     * {@snippet :
     * __pid_t getpgid(__pid_t __pid);
     * }
     */
    public static int getpgid(int __pid) {
        var mh$ = getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$26.setpgid$MH,"setpgid");
    }
    /**
     * {@snippet :
     * int setpgid(__pid_t __pid, __pid_t __pgid);
     * }
     */
    public static int setpgid(int __pid, int __pgid) {
        var mh$ = setpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __pgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.setpgrp$MH,"setpgrp");
    }
    /**
     * {@snippet :
     * int setpgrp();
     * }
     */
    public static int setpgrp() {
        var mh$ = setpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsid$MH() {
        return RuntimeHelper.requireNonNull(constants$26.setsid$MH,"setsid");
    }
    /**
     * {@snippet :
     * __pid_t setsid();
     * }
     */
    public static int setsid() {
        var mh$ = setsid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsid$MH() {
        return RuntimeHelper.requireNonNull(constants$26.getsid$MH,"getsid");
    }
    /**
     * {@snippet :
     * __pid_t getsid(__pid_t __pid);
     * }
     */
    public static int getsid(int __pid) {
        var mh$ = getsid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getuid$MH,"getuid");
    }
    /**
     * {@snippet :
     * __uid_t getuid();
     * }
     */
    public static int getuid() {
        var mh$ = getuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$27.geteuid$MH,"geteuid");
    }
    /**
     * {@snippet :
     * __uid_t geteuid();
     * }
     */
    public static int geteuid() {
        var mh$ = geteuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getgid$MH,"getgid");
    }
    /**
     * {@snippet :
     * __gid_t getgid();
     * }
     */
    public static int getgid() {
        var mh$ = getgid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getegid$MH,"getegid");
    }
    /**
     * {@snippet :
     * __gid_t getegid();
     * }
     */
    public static int getegid() {
        var mh$ = getegid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getgroups$MH,"getgroups");
    }
    /**
     * {@snippet :
     * int getgroups(int __size, __gid_t __list[]);
     * }
     */
    public static int getgroups(int __size, MemorySegment __list) {
        var mh$ = getgroups$MH();
        try {
            return (int)mh$.invokeExact(__size, __list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle group_member$MH() {
        return RuntimeHelper.requireNonNull(constants$27.group_member$MH,"group_member");
    }
    /**
     * {@snippet :
     * int group_member(__gid_t __gid);
     * }
     */
    public static int group_member(int __gid) {
        var mh$ = group_member$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setuid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setuid$MH,"setuid");
    }
    /**
     * {@snippet :
     * int setuid(__uid_t __uid);
     * }
     */
    public static int setuid(int __uid) {
        var mh$ = setuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setreuid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setreuid$MH,"setreuid");
    }
    /**
     * {@snippet :
     * int setreuid(__uid_t __ruid, __uid_t __euid);
     * }
     */
    public static int setreuid(int __ruid, int __euid) {
        var mh$ = setreuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.seteuid$MH,"seteuid");
    }
    /**
     * {@snippet :
     * int seteuid(__uid_t __uid);
     * }
     */
    public static int seteuid(int __uid) {
        var mh$ = seteuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setgid$MH,"setgid");
    }
    /**
     * {@snippet :
     * int setgid(__gid_t __gid);
     * }
     */
    public static int setgid(int __gid) {
        var mh$ = setgid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setregid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setregid$MH,"setregid");
    }
    /**
     * {@snippet :
     * int setregid(__gid_t __rgid, __gid_t __egid);
     * }
     */
    public static int setregid(int __rgid, int __egid) {
        var mh$ = setregid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setegid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setegid$MH,"setegid");
    }
    /**
     * {@snippet :
     * int setegid(__gid_t __gid);
     * }
     */
    public static int setegid(int __gid) {
        var mh$ = setegid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getresuid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getresuid$MH,"getresuid");
    }
    /**
     * {@snippet :
     * int getresuid(__uid_t* __ruid, __uid_t* __euid, __uid_t* __suid);
     * }
     */
    public static int getresuid(MemorySegment __ruid, MemorySegment __euid, MemorySegment __suid) {
        var mh$ = getresuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid, __suid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getresgid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getresgid$MH,"getresgid");
    }
    /**
     * {@snippet :
     * int getresgid(__gid_t* __rgid, __gid_t* __egid, __gid_t* __sgid);
     * }
     */
    public static int getresgid(MemorySegment __rgid, MemorySegment __egid, MemorySegment __sgid) {
        var mh$ = getresgid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid, __sgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setresuid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.setresuid$MH,"setresuid");
    }
    /**
     * {@snippet :
     * int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid);
     * }
     */
    public static int setresuid(int __ruid, int __euid, int __suid) {
        var mh$ = setresuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid, __suid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setresgid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.setresgid$MH,"setresgid");
    }
    /**
     * {@snippet :
     * int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid);
     * }
     */
    public static int setresgid(int __rgid, int __egid, int __sgid) {
        var mh$ = setresgid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid, __sgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fork$MH,"fork");
    }
    /**
     * {@snippet :
     * __pid_t fork();
     * }
     */
    public static int fork() {
        var mh$ = fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfork$MH() {
        return RuntimeHelper.requireNonNull(constants$29.vfork$MH,"vfork");
    }
    /**
     * {@snippet :
     * int vfork();
     * }
     */
    public static int vfork() {
        var mh$ = vfork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Fork$MH() {
        return RuntimeHelper.requireNonNull(constants$30._Fork$MH,"_Fork");
    }
    /**
     * {@snippet :
     * __pid_t _Fork();
     * }
     */
    public static int _Fork() {
        var mh$ = _Fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname$MH() {
        return RuntimeHelper.requireNonNull(constants$30.ttyname$MH,"ttyname");
    }
    /**
     * {@snippet :
     * char* ttyname(int __fd);
     * }
     */
    public static MemorySegment ttyname(int __fd) {
        var mh$ = ttyname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.ttyname_r$MH,"ttyname_r");
    }
    /**
     * {@snippet :
     * int ttyname_r(int __fd, char* __buf, size_t __buflen);
     * }
     */
    public static int ttyname_r(int __fd, MemorySegment __buf, long __buflen) {
        var mh$ = ttyname_r$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$30.isatty$MH,"isatty");
    }
    /**
     * {@snippet :
     * int isatty(int __fd);
     * }
     */
    public static int isatty(int __fd) {
        var mh$ = isatty$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyslot$MH() {
        return RuntimeHelper.requireNonNull(constants$30.ttyslot$MH,"ttyslot");
    }
    /**
     * {@snippet :
     * int ttyslot();
     * }
     */
    public static int ttyslot() {
        var mh$ = ttyslot$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$30.link$MH,"link");
    }
    /**
     * {@snippet :
     * int link(char* __from, char* __to);
     * }
     */
    public static int link(MemorySegment __from, MemorySegment __to) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$31.linkat$MH,"linkat");
    }
    /**
     * {@snippet :
     * int linkat(int __fromfd, char* __from, int __tofd, char* __to, int __flags);
     * }
     */
    public static int linkat(int __fromfd, MemorySegment __from, int __tofd, MemorySegment __to, int __flags) {
        var mh$ = linkat$MH();
        try {
            return (int)mh$.invokeExact(__fromfd, __from, __tofd, __to, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$31.symlink$MH,"symlink");
    }
    /**
     * {@snippet :
     * int symlink(char* __from, char* __to);
     * }
     */
    public static int symlink(MemorySegment __from, MemorySegment __to) {
        var mh$ = symlink$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$31.readlink$MH,"readlink");
    }
    /**
     * {@snippet :
     * ssize_t readlink(char* __path, char* __buf, size_t __len);
     * }
     */
    public static long readlink(MemorySegment __path, MemorySegment __buf, long __len) {
        var mh$ = readlink$MH();
        try {
            return (long)mh$.invokeExact(__path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$31.symlinkat$MH,"symlinkat");
    }
    /**
     * {@snippet :
     * int symlinkat(char* __from, int __tofd, char* __to);
     * }
     */
    public static int symlinkat(MemorySegment __from, int __tofd, MemorySegment __to) {
        var mh$ = symlinkat$MH();
        try {
            return (int)mh$.invokeExact(__from, __tofd, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$31.readlinkat$MH,"readlinkat");
    }
    /**
     * {@snippet :
     * ssize_t readlinkat(int __fd, char* __path, char* __buf, size_t __len);
     * }
     */
    public static long readlinkat(int __fd, MemorySegment __path, MemorySegment __buf, long __len) {
        var mh$ = readlinkat$MH();
        try {
            return (long)mh$.invokeExact(__fd, __path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$31.unlink$MH,"unlink");
    }
    /**
     * {@snippet :
     * int unlink(char* __name);
     * }
     */
    public static int unlink(MemorySegment __name) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$32.unlinkat$MH,"unlinkat");
    }
    /**
     * {@snippet :
     * int unlinkat(int __fd, char* __name, int __flag);
     * }
     */
    public static int unlinkat(int __fd, MemorySegment __name, int __flag) {
        var mh$ = unlinkat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __name, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$32.rmdir$MH,"rmdir");
    }
    /**
     * {@snippet :
     * int rmdir(char* __path);
     * }
     */
    public static int rmdir(MemorySegment __path) {
        var mh$ = rmdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$32.tcgetpgrp$MH,"tcgetpgrp");
    }
    /**
     * {@snippet :
     * __pid_t tcgetpgrp(int __fd);
     * }
     */
    public static int tcgetpgrp(int __fd) {
        var mh$ = tcgetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$32.tcsetpgrp$MH,"tcsetpgrp");
    }
    /**
     * {@snippet :
     * int tcsetpgrp(int __fd, __pid_t __pgrp_id);
     * }
     */
    public static int tcsetpgrp(int __fd, int __pgrp_id) {
        var mh$ = tcsetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd, __pgrp_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$32.getlogin$MH,"getlogin");
    }
    /**
     * {@snippet :
     * char* getlogin();
     * }
     */
    public static MemorySegment getlogin() {
        var mh$ = getlogin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin_r$MH() {
        return RuntimeHelper.requireNonNull(constants$32.getlogin_r$MH,"getlogin_r");
    }
    /**
     * {@snippet :
     * int getlogin_r(char* __name, size_t __name_len);
     * }
     */
    public static int getlogin_r(MemorySegment __name, long __name_len) {
        var mh$ = getlogin_r$MH();
        try {
            return (int)mh$.invokeExact(__name, __name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$33.setlogin$MH,"setlogin");
    }
    /**
     * {@snippet :
     * int setlogin(char* __name);
     * }
     */
    public static int setlogin(MemorySegment __name) {
        var mh$ = setlogin$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optarg$LAYOUT() {
        return constants$33.optarg$LAYOUT;
    }
    public static VarHandle optarg$VH() {
        return constants$33.optarg$VH;
    }
    public static MemorySegment optarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.optarg$SEGMENT,"optarg");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char* optarg;
     * }
     */
    public static MemorySegment optarg$get() {
        return (java.lang.foreign.MemorySegment) constants$33.optarg$VH.get(RuntimeHelper.requireNonNull(constants$33.optarg$SEGMENT, "optarg"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char* optarg;
     * }
     */
    public static void optarg$set(MemorySegment x) {
        constants$33.optarg$VH.set(RuntimeHelper.requireNonNull(constants$33.optarg$SEGMENT, "optarg"), x);
    }
    public static MemoryLayout optind$LAYOUT() {
        return constants$33.optind$LAYOUT;
    }
    public static VarHandle optind$VH() {
        return constants$33.optind$VH;
    }
    public static MemorySegment optind$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.optind$SEGMENT,"optind");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int optind;
     * }
     */
    public static int optind$get() {
        return (int) constants$33.optind$VH.get(RuntimeHelper.requireNonNull(constants$33.optind$SEGMENT, "optind"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int optind;
     * }
     */
    public static void optind$set(int x) {
        constants$33.optind$VH.set(RuntimeHelper.requireNonNull(constants$33.optind$SEGMENT, "optind"), x);
    }
    public static MemoryLayout opterr$LAYOUT() {
        return constants$33.opterr$LAYOUT;
    }
    public static VarHandle opterr$VH() {
        return constants$33.opterr$VH;
    }
    public static MemorySegment opterr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.opterr$SEGMENT,"opterr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int opterr;
     * }
     */
    public static int opterr$get() {
        return (int) constants$33.opterr$VH.get(RuntimeHelper.requireNonNull(constants$33.opterr$SEGMENT, "opterr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int opterr;
     * }
     */
    public static void opterr$set(int x) {
        constants$33.opterr$VH.set(RuntimeHelper.requireNonNull(constants$33.opterr$SEGMENT, "opterr"), x);
    }
    public static MemoryLayout optopt$LAYOUT() {
        return constants$33.optopt$LAYOUT;
    }
    public static VarHandle optopt$VH() {
        return constants$33.optopt$VH;
    }
    public static MemorySegment optopt$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.optopt$SEGMENT,"optopt");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int optopt;
     * }
     */
    public static int optopt$get() {
        return (int) constants$33.optopt$VH.get(RuntimeHelper.requireNonNull(constants$33.optopt$SEGMENT, "optopt"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int optopt;
     * }
     */
    public static void optopt$set(int x) {
        constants$33.optopt$VH.set(RuntimeHelper.requireNonNull(constants$33.optopt$SEGMENT, "optopt"), x);
    }
    public static MethodHandle getopt$MH() {
        return RuntimeHelper.requireNonNull(constants$33.getopt$MH,"getopt");
    }
    /**
     * {@snippet :
     * int getopt(int ___argc, char** ___argv, char* __shortopts);
     * }
     */
    public static int getopt(int ___argc, MemorySegment ___argv, MemorySegment __shortopts) {
        var mh$ = getopt$MH();
        try {
            return (int)mh$.invokeExact(___argc, ___argv, __shortopts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$34.gethostname$MH,"gethostname");
    }
    /**
     * {@snippet :
     * int gethostname(char* __name, size_t __len);
     * }
     */
    public static int gethostname(MemorySegment __name, long __len) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$34.sethostname$MH,"sethostname");
    }
    /**
     * {@snippet :
     * int sethostname(char* __name, size_t __len);
     * }
     */
    public static int sethostname(MemorySegment __name, long __len) {
        var mh$ = sethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$34.sethostid$MH,"sethostid");
    }
    /**
     * {@snippet :
     * int sethostid(long __id);
     * }
     */
    public static int sethostid(long __id) {
        var mh$ = sethostid$MH();
        try {
            return (int)mh$.invokeExact(__id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$34.getdomainname$MH,"getdomainname");
    }
    /**
     * {@snippet :
     * int getdomainname(char* __name, size_t __len);
     * }
     */
    public static int getdomainname(MemorySegment __name, long __len) {
        var mh$ = getdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$34.setdomainname$MH,"setdomainname");
    }
    /**
     * {@snippet :
     * int setdomainname(char* __name, size_t __len);
     * }
     */
    public static int setdomainname(MemorySegment __name, long __len) {
        var mh$ = setdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vhangup$MH() {
        return RuntimeHelper.requireNonNull(constants$34.vhangup$MH,"vhangup");
    }
    /**
     * {@snippet :
     * int vhangup();
     * }
     */
    public static int vhangup() {
        var mh$ = vhangup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle revoke$MH() {
        return RuntimeHelper.requireNonNull(constants$35.revoke$MH,"revoke");
    }
    /**
     * {@snippet :
     * int revoke(char* __file);
     * }
     */
    public static int revoke(MemorySegment __file) {
        var mh$ = revoke$MH();
        try {
            return (int)mh$.invokeExact(__file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle profil$MH() {
        return RuntimeHelper.requireNonNull(constants$35.profil$MH,"profil");
    }
    /**
     * {@snippet :
     * int profil(unsigned short* __sample_buffer, size_t __size, size_t __offset, unsigned int __scale);
     * }
     */
    public static int profil(MemorySegment __sample_buffer, long __size, long __offset, int __scale) {
        var mh$ = profil$MH();
        try {
            return (int)mh$.invokeExact(__sample_buffer, __size, __offset, __scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acct$MH() {
        return RuntimeHelper.requireNonNull(constants$35.acct$MH,"acct");
    }
    /**
     * {@snippet :
     * int acct(char* __name);
     * }
     */
    public static int acct(MemorySegment __name) {
        var mh$ = acct$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$35.getusershell$MH,"getusershell");
    }
    /**
     * {@snippet :
     * char* getusershell();
     * }
     */
    public static MemorySegment getusershell() {
        var mh$ = getusershell$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$35.endusershell$MH,"endusershell");
    }
    /**
     * {@snippet :
     * void endusershell();
     * }
     */
    public static void endusershell() {
        var mh$ = endusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$35.setusershell$MH,"setusershell");
    }
    /**
     * {@snippet :
     * void setusershell();
     * }
     */
    public static void setusershell() {
        var mh$ = setusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle daemon$MH() {
        return RuntimeHelper.requireNonNull(constants$36.daemon$MH,"daemon");
    }
    /**
     * {@snippet :
     * int daemon(int __nochdir, int __noclose);
     * }
     */
    public static int daemon(int __nochdir, int __noclose) {
        var mh$ = daemon$MH();
        try {
            return (int)mh$.invokeExact(__nochdir, __noclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chroot$MH() {
        return RuntimeHelper.requireNonNull(constants$36.chroot$MH,"chroot");
    }
    /**
     * {@snippet :
     * int chroot(char* __path);
     * }
     */
    public static int chroot(MemorySegment __path) {
        var mh$ = chroot$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpass$MH() {
        return RuntimeHelper.requireNonNull(constants$36.getpass$MH,"getpass");
    }
    /**
     * {@snippet :
     * char* getpass(char* __prompt);
     * }
     */
    public static MemorySegment getpass(MemorySegment __prompt) {
        var mh$ = getpass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__prompt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fsync$MH,"fsync");
    }
    /**
     * {@snippet :
     * int fsync(int __fd);
     * }
     */
    public static int fsync(int __fd) {
        var mh$ = fsync$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syncfs$MH() {
        return RuntimeHelper.requireNonNull(constants$36.syncfs$MH,"syncfs");
    }
    /**
     * {@snippet :
     * int syncfs(int __fd);
     * }
     */
    public static int syncfs(int __fd) {
        var mh$ = syncfs$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.gethostid$MH,"gethostid");
    }
    /**
     * {@snippet :
     * long gethostid();
     * }
     */
    public static long gethostid() {
        var mh$ = gethostid$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync$MH() {
        return RuntimeHelper.requireNonNull(constants$37.sync$MH,"sync");
    }
    /**
     * {@snippet :
     * void sync();
     * }
     */
    public static void sync() {
        var mh$ = sync$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpagesize$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getpagesize$MH,"getpagesize");
    }
    /**
     * {@snippet :
     * int getpagesize();
     * }
     */
    public static int getpagesize() {
        var mh$ = getpagesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdtablesize$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getdtablesize$MH,"getdtablesize");
    }
    /**
     * {@snippet :
     * int getdtablesize();
     * }
     */
    public static int getdtablesize() {
        var mh$ = getdtablesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.truncate$MH,"truncate");
    }
    /**
     * {@snippet :
     * int truncate(char* __file, __off_t __length);
     * }
     */
    public static int truncate(MemorySegment __file, long __length) {
        var mh$ = truncate$MH();
        try {
            return (int)mh$.invokeExact(__file, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate64$MH() {
        return RuntimeHelper.requireNonNull(constants$37.truncate64$MH,"truncate64");
    }
    /**
     * {@snippet :
     * int truncate64(char* __file, __off64_t __length);
     * }
     */
    public static int truncate64(MemorySegment __file, long __length) {
        var mh$ = truncate64$MH();
        try {
            return (int)mh$.invokeExact(__file, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.ftruncate$MH,"ftruncate");
    }
    /**
     * {@snippet :
     * int ftruncate(int __fd, __off_t __length);
     * }
     */
    public static int ftruncate(int __fd, long __length) {
        var mh$ = ftruncate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate64$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ftruncate64$MH,"ftruncate64");
    }
    /**
     * {@snippet :
     * int ftruncate64(int __fd, __off64_t __length);
     * }
     */
    public static int ftruncate64(int __fd, long __length) {
        var mh$ = ftruncate64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle brk$MH() {
        return RuntimeHelper.requireNonNull(constants$38.brk$MH,"brk");
    }
    /**
     * {@snippet :
     * int brk(void* __addr);
     * }
     */
    public static int brk(MemorySegment __addr) {
        var mh$ = brk$MH();
        try {
            return (int)mh$.invokeExact(__addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$38.sbrk$MH,"sbrk");
    }
    /**
     * {@snippet :
     * void* sbrk(intptr_t __delta);
     * }
     */
    public static MemorySegment sbrk(long __delta) {
        var mh$ = sbrk$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syscall$MH() {
        return RuntimeHelper.requireNonNull(constants$38.syscall$MH,"syscall");
    }
    /**
     * {@snippet :
     * long syscall(long __sysno,...);
     * }
     */
    public static long syscall(long __sysno, Object... x1) {
        var mh$ = syscall$MH();
        try {
            return (long)mh$.invokeExact(__sysno, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.lockf$MH,"lockf");
    }
    /**
     * {@snippet :
     * int lockf(int __fd, int __cmd, __off_t __len);
     * }
     */
    public static int lockf(int __fd, int __cmd, long __len) {
        var mh$ = lockf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf64$MH() {
        return RuntimeHelper.requireNonNull(constants$38.lockf64$MH,"lockf64");
    }
    /**
     * {@snippet :
     * int lockf64(int __fd, int __cmd, __off64_t __len);
     * }
     */
    public static int lockf64(int __fd, int __cmd, long __len) {
        var mh$ = lockf64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copy_file_range$MH() {
        return RuntimeHelper.requireNonNull(constants$39.copy_file_range$MH,"copy_file_range");
    }
    /**
     * {@snippet :
     * ssize_t copy_file_range(int __infd, __off64_t* __pinoff, int __outfd, __off64_t* __poutoff, size_t __length, unsigned int __flags);
     * }
     */
    public static long copy_file_range(int __infd, MemorySegment __pinoff, int __outfd, MemorySegment __poutoff, long __length, int __flags) {
        var mh$ = copy_file_range$MH();
        try {
            return (long)mh$.invokeExact(__infd, __pinoff, __outfd, __poutoff, __length, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdatasync$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fdatasync$MH,"fdatasync");
    }
    /**
     * {@snippet :
     * int fdatasync(int __fildes);
     * }
     */
    public static int fdatasync(int __fildes) {
        var mh$ = fdatasync$MH();
        try {
            return (int)mh$.invokeExact(__fildes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$39.crypt$MH,"crypt");
    }
    /**
     * {@snippet :
     * char* crypt(char* __key, char* __salt);
     * }
     */
    public static MemorySegment crypt(MemorySegment __key, MemorySegment __salt) {
        var mh$ = crypt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __salt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$39.swab$MH,"swab");
    }
    /**
     * {@snippet :
     * void swab(void* __from, void* __to, ssize_t __n);
     * }
     */
    public static void swab(MemorySegment __from, MemorySegment __to, long __n) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(__from, __to, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getentropy$MH() {
        return RuntimeHelper.requireNonNull(constants$39.getentropy$MH,"getentropy");
    }
    /**
     * {@snippet :
     * int getentropy(void* __buffer, size_t __length);
     * }
     */
    public static int getentropy(MemorySegment __buffer, long __length) {
        var mh$ = getentropy$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close_range$MH() {
        return RuntimeHelper.requireNonNull(constants$39.close_range$MH,"close_range");
    }
    /**
     * {@snippet :
     * int close_range(unsigned int __fd, unsigned int __max_fd, int __flags);
     * }
     */
    public static int close_range(int __fd, int __max_fd, int __flags) {
        var mh$ = close_range$MH();
        try {
            return (int)mh$.invokeExact(__fd, __max_fd, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettid$MH() {
        return RuntimeHelper.requireNonNull(constants$40.gettid$MH,"gettid");
    }
    /**
     * {@snippet :
     * __pid_t gettid();
     * }
     */
    public static int gettid() {
        var mh$ = gettid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SS_ONSTACK = 1;
     * }
     */
    public static int SS_ONSTACK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SS_DISABLE = 2;
     * }
     */
    public static int SS_DISABLE() {
        return (int)2L;
    }
    public static MethodHandle sigaltstack$MH() {
        return RuntimeHelper.requireNonNull(constants$40.sigaltstack$MH,"sigaltstack");
    }
    /**
     * {@snippet :
     * int sigaltstack(const stack_t* __ss, stack_t* __oss);
     * }
     */
    public static int sigaltstack(MemorySegment __ss, MemorySegment __oss) {
        var mh$ = sigaltstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigstack$MH() {
        return RuntimeHelper.requireNonNull(constants$40.sigstack$MH,"sigstack");
    }
    /**
     * {@snippet :
     * int sigstack(struct sigstack* __ss, struct sigstack* __oss);
     * }
     */
    public static int sigstack(MemorySegment __ss, MemorySegment __oss) {
        var mh$ = sigstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sighold$MH() {
        return RuntimeHelper.requireNonNull(constants$40.sighold$MH,"sighold");
    }
    /**
     * {@snippet :
     * int sighold(int __sig);
     * }
     */
    public static int sighold(int __sig) {
        var mh$ = sighold$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigrelse$MH() {
        return RuntimeHelper.requireNonNull(constants$40.sigrelse$MH,"sigrelse");
    }
    /**
     * {@snippet :
     * int sigrelse(int __sig);
     * }
     */
    public static int sigrelse(int __sig) {
        var mh$ = sigrelse$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigignore$MH() {
        return RuntimeHelper.requireNonNull(constants$40.sigignore$MH,"sigignore");
    }
    /**
     * {@snippet :
     * int sigignore(int __sig);
     * }
     */
    public static int sigignore(int __sig) {
        var mh$ = sigignore$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigset$MH() {
        return RuntimeHelper.requireNonNull(constants$41.sigset$MH,"sigset");
    }
    /**
     * {@snippet :
     * __sighandler_t sigset(int __sig, __sighandler_t __disp);
     * }
     */
    public static MemorySegment sigset(int __sig, MemorySegment __disp) {
        var mh$ = sigset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __disp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_sigmask$MH() {
        return RuntimeHelper.requireNonNull(constants$41.pthread_sigmask$MH,"pthread_sigmask");
    }
    /**
     * {@snippet :
     * int pthread_sigmask(int __how, const __sigset_t* __newmask, __sigset_t* __oldmask);
     * }
     */
    public static int pthread_sigmask(int __how, MemorySegment __newmask, MemorySegment __oldmask) {
        var mh$ = pthread_sigmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __newmask, __oldmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_kill$MH() {
        return RuntimeHelper.requireNonNull(constants$41.pthread_kill$MH,"pthread_kill");
    }
    /**
     * {@snippet :
     * int pthread_kill(pthread_t __threadid, int __signo);
     * }
     */
    public static int pthread_kill(long __threadid, int __signo) {
        var mh$ = pthread_kill$MH();
        try {
            return (int)mh$.invokeExact(__threadid, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_sigqueue$MH() {
        return RuntimeHelper.requireNonNull(constants$41.pthread_sigqueue$MH,"pthread_sigqueue");
    }
    /**
     * {@snippet :
     * int pthread_sigqueue(pthread_t __threadid, int __signo, union sigval __value);
     * }
     */
    public static int pthread_sigqueue(long __threadid, int __signo, MemorySegment __value) {
        var mh$ = pthread_sigqueue$MH();
        try {
            return (int)mh$.invokeExact(__threadid, __signo, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmin$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__libc_current_sigrtmin$MH,"__libc_current_sigrtmin");
    }
    /**
     * {@snippet :
     * int __libc_current_sigrtmin();
     * }
     */
    public static int __libc_current_sigrtmin() {
        var mh$ = __libc_current_sigrtmin$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmax$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__libc_current_sigrtmax$MH,"__libc_current_sigrtmax");
    }
    /**
     * {@snippet :
     * int __libc_current_sigrtmax();
     * }
     */
    public static int __libc_current_sigrtmax() {
        var mh$ = __libc_current_sigrtmax$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgkill$MH() {
        return RuntimeHelper.requireNonNull(constants$42.tgkill$MH,"tgkill");
    }
    /**
     * {@snippet :
     * int tgkill(__pid_t __tgid, __pid_t __tid, int __signal);
     * }
     */
    public static int tgkill(int __tgid, int __tid, int __signal) {
        var mh$ = tgkill$MH();
        try {
            return (int)mh$.invokeExact(__tgid, __tid, __signal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __gwchar_t;
     * }
     */
    public static final OfInt __gwchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$42.imaxabs$MH,"imaxabs");
    }
    /**
     * {@snippet :
     * intmax_t imaxabs(intmax_t __n);
     * }
     */
    public static long imaxabs(long __n) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.imaxdiv$MH,"imaxdiv");
    }
    /**
     * {@snippet :
     * imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom);
     * }
     */
    public static MemorySegment imaxdiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtoimax$MH,"strtoimax");
    }
    /**
     * {@snippet :
     * intmax_t strtoimax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtoumax$MH,"strtoumax");
    }
    /**
     * {@snippet :
     * uintmax_t strtoumax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$42.wcstoimax$MH,"wcstoimax");
    }
    /**
     * {@snippet :
     * intmax_t wcstoimax(const __gwchar_t* __nptr, __gwchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$43.wcstoumax$MH,"wcstoumax");
    }
    /**
     * {@snippet :
     * uintmax_t wcstoumax(const __gwchar_t* __nptr, __gwchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$43.clock_adjtime$MH,"clock_adjtime");
    }
    /**
     * {@snippet :
     * int clock_adjtime(__clockid_t __clock_id, struct timex* __utx);
     * }
     */
    public static int clock_adjtime(int __clock_id, MemorySegment __utx) {
        var mh$ = clock_adjtime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __utx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct __locale_struct* __locale_t;
     * }
     */
    public static final OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct __locale_struct* locale_t;
     * }
     */
    public static final OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$43.clock$MH,"clock");
    }
    /**
     * {@snippet :
     * clock_t clock();
     * }
     */
    public static long clock() {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$43.time$MH,"time");
    }
    /**
     * {@snippet :
     * time_t time(time_t* __timer);
     * }
     */
    public static long time(MemorySegment __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$43.difftime$MH,"difftime");
    }
    /**
     * {@snippet :
     * double difftime(time_t __time1, time_t __time0);
     * }
     */
    public static double difftime(long __time1, long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mktime$MH,"mktime");
    }
    /**
     * {@snippet :
     * time_t mktime(struct tm* __tp);
     * }
     */
    public static long mktime(MemorySegment __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strftime$MH,"strftime");
    }
    /**
     * {@snippet :
     * size_t strftime(char* __s, size_t __maxsize, char* __format, struct tm* __tp);
     * }
     */
    public static long strftime(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strptime$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strptime$MH,"strptime");
    }
    /**
     * {@snippet :
     * char* strptime(char* __s, char* __fmt, struct tm* __tp);
     * }
     */
    public static MemorySegment strptime(MemorySegment __s, MemorySegment __fmt, MemorySegment __tp) {
        var mh$ = strptime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __fmt, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strftime_l$MH,"strftime_l");
    }
    /**
     * {@snippet :
     * size_t strftime_l(char* __s, size_t __maxsize, char* __format, struct tm* __tp, locale_t __loc);
     * }
     */
    public static long strftime_l(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp, MemorySegment __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strptime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strptime_l$MH,"strptime_l");
    }
    /**
     * {@snippet :
     * char* strptime_l(char* __s, char* __fmt, struct tm* __tp, locale_t __loc);
     * }
     */
    public static MemorySegment strptime_l(MemorySegment __s, MemorySegment __fmt, MemorySegment __tp, MemorySegment __loc) {
        var mh$ = strptime_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __fmt, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$44.gmtime$MH,"gmtime");
    }
    /**
     * {@snippet :
     * struct tm* gmtime(const time_t* __timer);
     * }
     */
    public static MemorySegment gmtime(MemorySegment __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$44.localtime$MH,"localtime");
    }
    /**
     * {@snippet :
     * struct tm* localtime(const time_t* __timer);
     * }
     */
    public static MemorySegment localtime(MemorySegment __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$45.gmtime_r$MH,"gmtime_r");
    }
    /**
     * {@snippet :
     * struct tm* gmtime_r(const time_t* __timer, struct tm* __tp);
     * }
     */
    public static MemorySegment gmtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$45.localtime_r$MH,"localtime_r");
    }
    /**
     * {@snippet :
     * struct tm* localtime_r(const time_t* __timer, struct tm* __tp);
     * }
     */
    public static MemorySegment localtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$45.asctime$MH,"asctime");
    }
    /**
     * {@snippet :
     * char* asctime(struct tm* __tp);
     * }
     */
    public static MemorySegment asctime(MemorySegment __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$45.ctime$MH,"ctime");
    }
    /**
     * {@snippet :
     * char* ctime(const time_t* __timer);
     * }
     */
    public static MemorySegment ctime(MemorySegment __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$45.asctime_r$MH,"asctime_r");
    }
    /**
     * {@snippet :
     * char* asctime_r(struct tm* __tp, char* __buf);
     * }
     */
    public static MemorySegment asctime_r(MemorySegment __tp, MemorySegment __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$45.ctime_r$MH,"ctime_r");
    }
    /**
     * {@snippet :
     * char* ctime_r(const time_t* __timer, char* __buf);
     * }
     */
    public static MemorySegment ctime_r(MemorySegment __timer, MemorySegment __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * char* __tzname[2];
     * }
     */
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$46.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$46.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.__daylight$SEGMENT,"__daylight");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int __daylight;
     * }
     */
    public static int __daylight$get() {
        return (int) constants$46.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$46.__daylight$SEGMENT, "__daylight"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int __daylight;
     * }
     */
    public static void __daylight$set(int x) {
        constants$46.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$46.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$46.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$46.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.__timezone$SEGMENT,"__timezone");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * long __timezone;
     * }
     */
    public static long __timezone$get() {
        return (long) constants$46.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$46.__timezone$SEGMENT, "__timezone"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * long __timezone;
     * }
     */
    public static void __timezone$set(long x) {
        constants$46.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$46.__timezone$SEGMENT, "__timezone"), x);
    }
    /**
     * {@snippet :
     * char* tzname[2];
     * }
     */
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$46.tzset$MH,"tzset");
    }
    /**
     * {@snippet :
     * void tzset();
     * }
     */
    public static void tzset() {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$46.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$46.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.daylight$SEGMENT,"daylight");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static int daylight$get() {
        return (int) constants$46.daylight$VH.get(RuntimeHelper.requireNonNull(constants$46.daylight$SEGMENT, "daylight"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static void daylight$set(int x) {
        constants$46.daylight$VH.set(RuntimeHelper.requireNonNull(constants$46.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$47.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$47.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.timezone$SEGMENT,"timezone");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static long timezone$get() {
        return (long) constants$47.timezone$VH.get(RuntimeHelper.requireNonNull(constants$47.timezone$SEGMENT, "timezone"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static void timezone$set(long x) {
        constants$47.timezone$VH.set(RuntimeHelper.requireNonNull(constants$47.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$47.timegm$MH,"timegm");
    }
    /**
     * {@snippet :
     * time_t timegm(struct tm* __tp);
     * }
     */
    public static long timegm(MemorySegment __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$47.timelocal$MH,"timelocal");
    }
    /**
     * {@snippet :
     * time_t timelocal(struct tm* __tp);
     * }
     */
    public static long timelocal(MemorySegment __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$47.dysize$MH,"dysize");
    }
    /**
     * {@snippet :
     * int dysize(int __year);
     * }
     */
    public static int dysize(int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nanosleep$MH,"nanosleep");
    }
    /**
     * {@snippet :
     * int nanosleep(struct timespec* __requested_time, struct timespec* __remaining);
     * }
     */
    public static int nanosleep(MemorySegment __requested_time, MemorySegment __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$47.clock_getres$MH,"clock_getres");
    }
    /**
     * {@snippet :
     * int clock_getres(clockid_t __clock_id, struct timespec* __res);
     * }
     */
    public static int clock_getres(int __clock_id, MemorySegment __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$48.clock_gettime$MH,"clock_gettime");
    }
    /**
     * {@snippet :
     * int clock_gettime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_gettime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$48.clock_settime$MH,"clock_settime");
    }
    /**
     * {@snippet :
     * int clock_settime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_settime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$48.clock_nanosleep$MH,"clock_nanosleep");
    }
    /**
     * {@snippet :
     * int clock_nanosleep(clockid_t __clock_id, int __flags, struct timespec* __req, struct timespec* __rem);
     * }
     */
    public static int clock_nanosleep(int __clock_id, int __flags, MemorySegment __req, MemorySegment __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$48.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    /**
     * {@snippet :
     * int clock_getcpuclockid(pid_t __pid, clockid_t* __clock_id);
     * }
     */
    public static int clock_getcpuclockid(int __pid, MemorySegment __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$48.timer_create$MH,"timer_create");
    }
    /**
     * {@snippet :
     * int timer_create(clockid_t __clock_id, struct sigevent* __evp, timer_t* __timerid);
     * }
     */
    public static int timer_create(int __clock_id, MemorySegment __evp, MemorySegment __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$48.timer_delete$MH,"timer_delete");
    }
    /**
     * {@snippet :
     * int timer_delete(timer_t __timerid);
     * }
     */
    public static int timer_delete(MemorySegment __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.timer_settime$MH,"timer_settime");
    }
    /**
     * {@snippet :
     * int timer_settime(timer_t __timerid, int __flags, struct itimerspec* __value, struct itimerspec* __ovalue);
     * }
     */
    public static int timer_settime(MemorySegment __timerid, int __flags, MemorySegment __value, MemorySegment __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.timer_gettime$MH,"timer_gettime");
    }
    /**
     * {@snippet :
     * int timer_gettime(timer_t __timerid, struct itimerspec* __value);
     * }
     */
    public static int timer_gettime(MemorySegment __timerid, MemorySegment __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$49.timer_getoverrun$MH,"timer_getoverrun");
    }
    /**
     * {@snippet :
     * int timer_getoverrun(timer_t __timerid);
     * }
     */
    public static int timer_getoverrun(MemorySegment __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$49.timespec_get$MH,"timespec_get");
    }
    /**
     * {@snippet :
     * int timespec_get(struct timespec* __ts, int __base);
     * }
     */
    public static int timespec_get(MemorySegment __ts, int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$49.timespec_getres$MH,"timespec_getres");
    }
    /**
     * {@snippet :
     * int timespec_getres(struct timespec* __ts, int __base);
     * }
     */
    public static int timespec_getres(MemorySegment __ts, int __base) {
        var mh$ = timespec_getres$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout getdate_err$LAYOUT() {
        return constants$49.getdate_err$LAYOUT;
    }
    public static VarHandle getdate_err$VH() {
        return constants$49.getdate_err$VH;
    }
    public static MemorySegment getdate_err$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.getdate_err$SEGMENT,"getdate_err");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int getdate_err;
     * }
     */
    public static int getdate_err$get() {
        return (int) constants$49.getdate_err$VH.get(RuntimeHelper.requireNonNull(constants$49.getdate_err$SEGMENT, "getdate_err"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int getdate_err;
     * }
     */
    public static void getdate_err$set(int x) {
        constants$49.getdate_err$VH.set(RuntimeHelper.requireNonNull(constants$49.getdate_err$SEGMENT, "getdate_err"), x);
    }
    public static MethodHandle getdate$MH() {
        return RuntimeHelper.requireNonNull(constants$50.getdate$MH,"getdate");
    }
    /**
     * {@snippet :
     * struct tm* getdate(char* __string);
     * }
     */
    public static MemorySegment getdate(MemorySegment __string) {
        var mh$ = getdate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.getdate_r$MH,"getdate_r");
    }
    /**
     * {@snippet :
     * int getdate_r(char* __string, struct tm* __resbufp);
     * }
     */
    public static int getdate_r(MemorySegment __string, MemorySegment __resbufp) {
        var mh$ = getdate_r$MH();
        try {
            return (int)mh$.invokeExact(__string, __resbufp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum __pid_type.F_OWNER_TID = 0;
     * }
     */
    public static int F_OWNER_TID() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum __pid_type.F_OWNER_PID = 1;
     * }
     */
    public static int F_OWNER_PID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum __pid_type.F_OWNER_PGRP = 2;
     * }
     */
    public static int F_OWNER_PGRP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum __pid_type.F_OWNER_GID = 2;
     * }
     */
    public static int F_OWNER_GID() {
        return (int)2L;
    }
    public static MethodHandle readahead$MH() {
        return RuntimeHelper.requireNonNull(constants$50.readahead$MH,"readahead");
    }
    /**
     * {@snippet :
     * __ssize_t readahead(int __fd, __off64_t __offset, size_t __count);
     * }
     */
    public static long readahead(int __fd, long __offset, long __count) {
        var mh$ = readahead$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync_file_range$MH() {
        return RuntimeHelper.requireNonNull(constants$50.sync_file_range$MH,"sync_file_range");
    }
    /**
     * {@snippet :
     * int sync_file_range(int __fd, __off64_t __offset, __off64_t __count, unsigned int __flags);
     * }
     */
    public static int sync_file_range(int __fd, long __offset, long __count, int __flags) {
        var mh$ = sync_file_range$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __count, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vmsplice$MH() {
        return RuntimeHelper.requireNonNull(constants$50.vmsplice$MH,"vmsplice");
    }
    /**
     * {@snippet :
     * __ssize_t vmsplice(int __fdout, struct iovec* __iov, size_t __count, unsigned int __flags);
     * }
     */
    public static long vmsplice(int __fdout, MemorySegment __iov, long __count, int __flags) {
        var mh$ = vmsplice$MH();
        try {
            return (long)mh$.invokeExact(__fdout, __iov, __count, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle splice$MH() {
        return RuntimeHelper.requireNonNull(constants$50.splice$MH,"splice");
    }
    /**
     * {@snippet :
     * __ssize_t splice(int __fdin, __off64_t* __offin, int __fdout, __off64_t* __offout, size_t __len, unsigned int __flags);
     * }
     */
    public static long splice(int __fdin, MemorySegment __offin, int __fdout, MemorySegment __offout, long __len, int __flags) {
        var mh$ = splice$MH();
        try {
            return (long)mh$.invokeExact(__fdin, __offin, __fdout, __offout, __len, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tee$MH() {
        return RuntimeHelper.requireNonNull(constants$51.tee$MH,"tee");
    }
    /**
     * {@snippet :
     * __ssize_t tee(int __fdin, int __fdout, size_t __len, unsigned int __flags);
     * }
     */
    public static long tee(int __fdin, int __fdout, long __len, int __flags) {
        var mh$ = tee$MH();
        try {
            return (long)mh$.invokeExact(__fdin, __fdout, __len, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$51.fallocate$MH,"fallocate");
    }
    /**
     * {@snippet :
     * int fallocate(int __fd, int __mode, __off_t __offset, __off_t __len);
     * }
     */
    public static int fallocate(int __fd, int __mode, long __offset, long __len) {
        var mh$ = fallocate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fallocate64$MH() {
        return RuntimeHelper.requireNonNull(constants$51.fallocate64$MH,"fallocate64");
    }
    /**
     * {@snippet :
     * int fallocate64(int __fd, int __mode, __off64_t __offset, __off64_t __len);
     * }
     */
    public static int fallocate64(int __fd, int __mode, long __offset, long __len) {
        var mh$ = fallocate64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle name_to_handle_at$MH() {
        return RuntimeHelper.requireNonNull(constants$51.name_to_handle_at$MH,"name_to_handle_at");
    }
    /**
     * {@snippet :
     * int name_to_handle_at(int __dfd, char* __name, struct file_handle* __handle, int* __mnt_id, int __flags);
     * }
     */
    public static int name_to_handle_at(int __dfd, MemorySegment __name, MemorySegment __handle, MemorySegment __mnt_id, int __flags) {
        var mh$ = name_to_handle_at$MH();
        try {
            return (int)mh$.invokeExact(__dfd, __name, __handle, __mnt_id, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_by_handle_at$MH() {
        return RuntimeHelper.requireNonNull(constants$51.open_by_handle_at$MH,"open_by_handle_at");
    }
    /**
     * {@snippet :
     * int open_by_handle_at(int __mountdirfd, struct file_handle* __handle, int __flags);
     * }
     */
    public static int open_by_handle_at(int __mountdirfd, MemorySegment __handle, int __flags) {
        var mh$ = open_by_handle_at$MH();
        try {
            return (int)mh$.invokeExact(__mountdirfd, __handle, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$51.fcntl$MH,"fcntl");
    }
    /**
     * {@snippet :
     * int fcntl(int __fd, int __cmd,...);
     * }
     */
    public static int fcntl(int __fd, int __cmd, Object... x2) {
        var mh$ = fcntl$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcntl64$MH() {
        return RuntimeHelper.requireNonNull(constants$52.fcntl64$MH,"fcntl64");
    }
    /**
     * {@snippet :
     * int fcntl64(int __fd, int __cmd,...);
     * }
     */
    public static int fcntl64(int __fd, int __cmd, Object... x2) {
        var mh$ = fcntl64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$52.open$MH,"open");
    }
    /**
     * {@snippet :
     * int open(char* __file, int __oflag,...);
     * }
     */
    public static int open(MemorySegment __file, int __oflag, Object... x2) {
        var mh$ = open$MH();
        try {
            return (int)mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open64$MH() {
        return RuntimeHelper.requireNonNull(constants$52.open64$MH,"open64");
    }
    /**
     * {@snippet :
     * int open64(char* __file, int __oflag,...);
     * }
     */
    public static int open64(MemorySegment __file, int __oflag, Object... x2) {
        var mh$ = open64$MH();
        try {
            return (int)mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat$MH() {
        return RuntimeHelper.requireNonNull(constants$52.openat$MH,"openat");
    }
    /**
     * {@snippet :
     * int openat(int __fd, char* __file, int __oflag,...);
     * }
     */
    public static int openat(int __fd, MemorySegment __file, int __oflag, Object... x3) {
        var mh$ = openat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat64$MH() {
        return RuntimeHelper.requireNonNull(constants$52.openat64$MH,"openat64");
    }
    /**
     * {@snippet :
     * int openat64(int __fd, char* __file, int __oflag,...);
     * }
     */
    public static int openat64(int __fd, MemorySegment __file, int __oflag, Object... x3) {
        var mh$ = openat64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat$MH() {
        return RuntimeHelper.requireNonNull(constants$52.creat$MH,"creat");
    }
    /**
     * {@snippet :
     * int creat(char* __file, mode_t __mode);
     * }
     */
    public static int creat(MemorySegment __file, int __mode) {
        var mh$ = creat$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat64$MH() {
        return RuntimeHelper.requireNonNull(constants$53.creat64$MH,"creat64");
    }
    /**
     * {@snippet :
     * int creat64(char* __file, mode_t __mode);
     * }
     */
    public static int creat64(MemorySegment __file, int __mode) {
        var mh$ = creat64$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fadvise$MH() {
        return RuntimeHelper.requireNonNull(constants$53.posix_fadvise$MH,"posix_fadvise");
    }
    /**
     * {@snippet :
     * int posix_fadvise(int __fd, off_t __offset, off_t __len, int __advise);
     * }
     */
    public static int posix_fadvise(int __fd, long __offset, long __len, int __advise) {
        var mh$ = posix_fadvise$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fadvise64$MH() {
        return RuntimeHelper.requireNonNull(constants$53.posix_fadvise64$MH,"posix_fadvise64");
    }
    /**
     * {@snippet :
     * int posix_fadvise64(int __fd, off64_t __offset, off64_t __len, int __advise);
     * }
     */
    public static int posix_fadvise64(int __fd, long __offset, long __len, int __advise) {
        var mh$ = posix_fadvise64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$53.posix_fallocate$MH,"posix_fallocate");
    }
    /**
     * {@snippet :
     * int posix_fallocate(int __fd, off_t __offset, off_t __len);
     * }
     */
    public static int posix_fallocate(int __fd, long __offset, long __len) {
        var mh$ = posix_fallocate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fallocate64$MH() {
        return RuntimeHelper.requireNonNull(constants$53.posix_fallocate64$MH,"posix_fallocate64");
    }
    /**
     * {@snippet :
     * int posix_fallocate64(int __fd, off64_t __offset, off64_t __len);
     * }
     */
    public static int posix_fallocate64(int __fd, long __offset, long __len) {
        var mh$ = posix_fallocate64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clone$MH() {
        return RuntimeHelper.requireNonNull(constants$54.clone$MH,"clone");
    }
    /**
     * {@snippet :
     * int clone(int (*__fn)(void*), void* __child_stack, int __flags, void* __arg,...);
     * }
     */
    public static int clone(MemorySegment __fn, MemorySegment __child_stack, int __flags, MemorySegment __arg, Object... x4) {
        var mh$ = clone$MH();
        try {
            return (int)mh$.invokeExact(__fn, __child_stack, __flags, __arg, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unshare$MH() {
        return RuntimeHelper.requireNonNull(constants$54.unshare$MH,"unshare");
    }
    /**
     * {@snippet :
     * int unshare(int __flags);
     * }
     */
    public static int unshare(int __flags) {
        var mh$ = unshare$MH();
        try {
            return (int)mh$.invokeExact(__flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getcpu$MH() {
        return RuntimeHelper.requireNonNull(constants$54.sched_getcpu$MH,"sched_getcpu");
    }
    /**
     * {@snippet :
     * int sched_getcpu();
     * }
     */
    public static int sched_getcpu() {
        var mh$ = sched_getcpu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcpu$MH() {
        return RuntimeHelper.requireNonNull(constants$54.getcpu$MH,"getcpu");
    }
    /**
     * {@snippet :
     * int getcpu(unsigned int*, unsigned int*);
     * }
     */
    public static int getcpu(MemorySegment x0, MemorySegment x1) {
        var mh$ = getcpu$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setns$MH() {
        return RuntimeHelper.requireNonNull(constants$54.setns$MH,"setns");
    }
    /**
     * {@snippet :
     * int setns(int __fd, int __nstype);
     * }
     */
    public static int setns(int __fd, int __nstype) {
        var mh$ = setns$MH();
        try {
            return (int)mh$.invokeExact(__fd, __nstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long __cpu_mask;
     * }
     */
    public static final OfLong __cpu_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __sched_cpucount$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__sched_cpucount$MH,"__sched_cpucount");
    }
    /**
     * {@snippet :
     * int __sched_cpucount(size_t __setsize, const cpu_set_t* __setp);
     * }
     */
    public static int __sched_cpucount(long __setsize, MemorySegment __setp) {
        var mh$ = __sched_cpucount$MH();
        try {
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpualloc$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__sched_cpualloc$MH,"__sched_cpualloc");
    }
    /**
     * {@snippet :
     * cpu_set_t* __sched_cpualloc(size_t __count);
     * }
     */
    public static MemorySegment __sched_cpualloc(long __count) {
        var mh$ = __sched_cpualloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpufree$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__sched_cpufree$MH,"__sched_cpufree");
    }
    /**
     * {@snippet :
     * void __sched_cpufree(cpu_set_t* __set);
     * }
     */
    public static void __sched_cpufree(MemorySegment __set) {
        var mh$ = __sched_cpufree$MH();
        try {
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setparam$MH() {
        return RuntimeHelper.requireNonNull(constants$55.sched_setparam$MH,"sched_setparam");
    }
    /**
     * {@snippet :
     * int sched_setparam(__pid_t __pid, struct sched_param* __param);
     * }
     */
    public static int sched_setparam(int __pid, MemorySegment __param) {
        var mh$ = sched_setparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getparam$MH() {
        return RuntimeHelper.requireNonNull(constants$55.sched_getparam$MH,"sched_getparam");
    }
    /**
     * {@snippet :
     * int sched_getparam(__pid_t __pid, struct sched_param* __param);
     * }
     */
    public static int sched_getparam(int __pid, MemorySegment __param) {
        var mh$ = sched_getparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$55.sched_setscheduler$MH,"sched_setscheduler");
    }
    /**
     * {@snippet :
     * int sched_setscheduler(__pid_t __pid, int __policy, struct sched_param* __param);
     * }
     */
    public static int sched_setscheduler(int __pid, int __policy, MemorySegment __param) {
        var mh$ = sched_setscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sched_getscheduler$MH,"sched_getscheduler");
    }
    /**
     * {@snippet :
     * int sched_getscheduler(__pid_t __pid);
     * }
     */
    public static int sched_getscheduler(int __pid) {
        var mh$ = sched_getscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sched_yield$MH,"sched_yield");
    }
    /**
     * {@snippet :
     * int sched_yield();
     * }
     */
    public static int sched_yield() {
        var mh$ = sched_yield$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_max$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sched_get_priority_max$MH,"sched_get_priority_max");
    }
    /**
     * {@snippet :
     * int sched_get_priority_max(int __algorithm);
     * }
     */
    public static int sched_get_priority_max(int __algorithm) {
        var mh$ = sched_get_priority_max$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_min$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sched_get_priority_min$MH,"sched_get_priority_min");
    }
    /**
     * {@snippet :
     * int sched_get_priority_min(int __algorithm);
     * }
     */
    public static int sched_get_priority_min(int __algorithm) {
        var mh$ = sched_get_priority_min$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_rr_get_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sched_rr_get_interval$MH,"sched_rr_get_interval");
    }
    /**
     * {@snippet :
     * int sched_rr_get_interval(__pid_t __pid, struct timespec* __t);
     * }
     */
    public static int sched_rr_get_interval(int __pid, MemorySegment __t) {
        var mh$ = sched_rr_get_interval$MH();
        try {
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setaffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sched_setaffinity$MH,"sched_setaffinity");
    }
    /**
     * {@snippet :
     * int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t* __cpuset);
     * }
     */
    public static int sched_setaffinity(int __pid, long __cpusetsize, MemorySegment __cpuset) {
        var mh$ = sched_setaffinity$MH();
        try {
            return (int)mh$.invokeExact(__pid, __cpusetsize, __cpuset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getaffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sched_getaffinity$MH,"sched_getaffinity");
    }
    /**
     * {@snippet :
     * int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t* __cpuset);
     * }
     */
    public static int sched_getaffinity(int __pid, long __cpusetsize, MemorySegment __cpuset) {
        var mh$ = sched_getaffinity$MH();
        try {
            return (int)mh$.invokeExact(__pid, __cpusetsize, __cpuset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_SET_FLAG = 0;
     * }
     */
    public static int FSCONFIG_SET_FLAG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_SET_STRING = 1;
     * }
     */
    public static int FSCONFIG_SET_STRING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_SET_BINARY = 2;
     * }
     */
    public static int FSCONFIG_SET_BINARY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_SET_PATH = 3;
     * }
     */
    public static int FSCONFIG_SET_PATH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_SET_PATH_EMPTY = 4;
     * }
     */
    public static int FSCONFIG_SET_PATH_EMPTY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_SET_FD = 5;
     * }
     */
    public static int FSCONFIG_SET_FD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_CMD_CREATE = 6;
     * }
     */
    public static int FSCONFIG_CMD_CREATE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum fsconfig_command.FSCONFIG_CMD_RECONFIGURE = 7;
     * }
     */
    public static int FSCONFIG_CMD_RECONFIGURE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * typedef int __kernel_rwf_t;
     * }
     */
    public static final OfInt __kernel_rwf_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * enum .IOSQE_FIXED_FILE_BIT = 0;
     * }
     */
    public static int IOSQE_FIXED_FILE_BIT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .IOSQE_IO_DRAIN_BIT = 1;
     * }
     */
    public static int IOSQE_IO_DRAIN_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .IOSQE_IO_LINK_BIT = 2;
     * }
     */
    public static int IOSQE_IO_LINK_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .IOSQE_IO_HARDLINK_BIT = 3;
     * }
     */
    public static int IOSQE_IO_HARDLINK_BIT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .IOSQE_ASYNC_BIT = 4;
     * }
     */
    public static int IOSQE_ASYNC_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .IOSQE_BUFFER_SELECT_BIT = 5;
     * }
     */
    public static int IOSQE_BUFFER_SELECT_BIT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .IOSQE_CQE_SKIP_SUCCESS_BIT = 6;
     * }
     */
    public static int IOSQE_CQE_SKIP_SUCCESS_BIT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_NOP = 0;
     * }
     */
    public static int IORING_OP_NOP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_READV = 1;
     * }
     */
    public static int IORING_OP_READV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_WRITEV = 2;
     * }
     */
    public static int IORING_OP_WRITEV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_FSYNC = 3;
     * }
     */
    public static int IORING_OP_FSYNC() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_READ_FIXED = 4;
     * }
     */
    public static int IORING_OP_READ_FIXED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_WRITE_FIXED = 5;
     * }
     */
    public static int IORING_OP_WRITE_FIXED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_POLL_ADD = 6;
     * }
     */
    public static int IORING_OP_POLL_ADD() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_POLL_REMOVE = 7;
     * }
     */
    public static int IORING_OP_POLL_REMOVE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SYNC_FILE_RANGE = 8;
     * }
     */
    public static int IORING_OP_SYNC_FILE_RANGE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SENDMSG = 9;
     * }
     */
    public static int IORING_OP_SENDMSG() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_RECVMSG = 10;
     * }
     */
    public static int IORING_OP_RECVMSG() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_TIMEOUT = 11;
     * }
     */
    public static int IORING_OP_TIMEOUT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_TIMEOUT_REMOVE = 12;
     * }
     */
    public static int IORING_OP_TIMEOUT_REMOVE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_ACCEPT = 13;
     * }
     */
    public static int IORING_OP_ACCEPT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_ASYNC_CANCEL = 14;
     * }
     */
    public static int IORING_OP_ASYNC_CANCEL() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_LINK_TIMEOUT = 15;
     * }
     */
    public static int IORING_OP_LINK_TIMEOUT() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_CONNECT = 16;
     * }
     */
    public static int IORING_OP_CONNECT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_FALLOCATE = 17;
     * }
     */
    public static int IORING_OP_FALLOCATE() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_OPENAT = 18;
     * }
     */
    public static int IORING_OP_OPENAT() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_CLOSE = 19;
     * }
     */
    public static int IORING_OP_CLOSE() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_FILES_UPDATE = 20;
     * }
     */
    public static int IORING_OP_FILES_UPDATE() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_STATX = 21;
     * }
     */
    public static int IORING_OP_STATX() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_READ = 22;
     * }
     */
    public static int IORING_OP_READ() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_WRITE = 23;
     * }
     */
    public static int IORING_OP_WRITE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_FADVISE = 24;
     * }
     */
    public static int IORING_OP_FADVISE() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_MADVISE = 25;
     * }
     */
    public static int IORING_OP_MADVISE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SEND = 26;
     * }
     */
    public static int IORING_OP_SEND() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_RECV = 27;
     * }
     */
    public static int IORING_OP_RECV() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_OPENAT2 = 28;
     * }
     */
    public static int IORING_OP_OPENAT2() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_EPOLL_CTL = 29;
     * }
     */
    public static int IORING_OP_EPOLL_CTL() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SPLICE = 30;
     * }
     */
    public static int IORING_OP_SPLICE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_PROVIDE_BUFFERS = 31;
     * }
     */
    public static int IORING_OP_PROVIDE_BUFFERS() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_REMOVE_BUFFERS = 32;
     * }
     */
    public static int IORING_OP_REMOVE_BUFFERS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_TEE = 33;
     * }
     */
    public static int IORING_OP_TEE() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SHUTDOWN = 34;
     * }
     */
    public static int IORING_OP_SHUTDOWN() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_RENAMEAT = 35;
     * }
     */
    public static int IORING_OP_RENAMEAT() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_UNLINKAT = 36;
     * }
     */
    public static int IORING_OP_UNLINKAT() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_MKDIRAT = 37;
     * }
     */
    public static int IORING_OP_MKDIRAT() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SYMLINKAT = 38;
     * }
     */
    public static int IORING_OP_SYMLINKAT() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_LINKAT = 39;
     * }
     */
    public static int IORING_OP_LINKAT() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_MSG_RING = 40;
     * }
     */
    public static int IORING_OP_MSG_RING() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_FSETXATTR = 41;
     * }
     */
    public static int IORING_OP_FSETXATTR() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SETXATTR = 42;
     * }
     */
    public static int IORING_OP_SETXATTR() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_FGETXATTR = 43;
     * }
     */
    public static int IORING_OP_FGETXATTR() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_GETXATTR = 44;
     * }
     */
    public static int IORING_OP_GETXATTR() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SOCKET = 45;
     * }
     */
    public static int IORING_OP_SOCKET() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_URING_CMD = 46;
     * }
     */
    public static int IORING_OP_URING_CMD() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SEND_ZC = 47;
     * }
     */
    public static int IORING_OP_SEND_ZC() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_SENDMSG_ZC = 48;
     * }
     */
    public static int IORING_OP_SENDMSG_ZC() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum io_uring_op.IORING_OP_LAST = 49;
     * }
     */
    public static int IORING_OP_LAST() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum .IORING_MSG_DATA = 0;
     * }
     */
    public static int IORING_MSG_DATA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .IORING_MSG_SEND_FD = 1;
     * }
     */
    public static int IORING_MSG_SEND_FD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .IORING_CQE_BUFFER_SHIFT = 16;
     * }
     */
    public static int IORING_CQE_BUFFER_SHIFT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_BUFFERS = 0;
     * }
     */
    public static int IORING_REGISTER_BUFFERS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .IORING_UNREGISTER_BUFFERS = 1;
     * }
     */
    public static int IORING_UNREGISTER_BUFFERS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_FILES = 2;
     * }
     */
    public static int IORING_REGISTER_FILES() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .IORING_UNREGISTER_FILES = 3;
     * }
     */
    public static int IORING_UNREGISTER_FILES() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_EVENTFD = 4;
     * }
     */
    public static int IORING_REGISTER_EVENTFD() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .IORING_UNREGISTER_EVENTFD = 5;
     * }
     */
    public static int IORING_UNREGISTER_EVENTFD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_FILES_UPDATE = 6;
     * }
     */
    public static int IORING_REGISTER_FILES_UPDATE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_EVENTFD_ASYNC = 7;
     * }
     */
    public static int IORING_REGISTER_EVENTFD_ASYNC() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_PROBE = 8;
     * }
     */
    public static int IORING_REGISTER_PROBE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_PERSONALITY = 9;
     * }
     */
    public static int IORING_REGISTER_PERSONALITY() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .IORING_UNREGISTER_PERSONALITY = 10;
     * }
     */
    public static int IORING_UNREGISTER_PERSONALITY() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_RESTRICTIONS = 11;
     * }
     */
    public static int IORING_REGISTER_RESTRICTIONS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_ENABLE_RINGS = 12;
     * }
     */
    public static int IORING_REGISTER_ENABLE_RINGS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_FILES2 = 13;
     * }
     */
    public static int IORING_REGISTER_FILES2() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_FILES_UPDATE2 = 14;
     * }
     */
    public static int IORING_REGISTER_FILES_UPDATE2() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_BUFFERS2 = 15;
     * }
     */
    public static int IORING_REGISTER_BUFFERS2() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_BUFFERS_UPDATE = 16;
     * }
     */
    public static int IORING_REGISTER_BUFFERS_UPDATE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_IOWQ_AFF = 17;
     * }
     */
    public static int IORING_REGISTER_IOWQ_AFF() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .IORING_UNREGISTER_IOWQ_AFF = 18;
     * }
     */
    public static int IORING_UNREGISTER_IOWQ_AFF() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_IOWQ_MAX_WORKERS = 19;
     * }
     */
    public static int IORING_REGISTER_IOWQ_MAX_WORKERS() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_RING_FDS = 20;
     * }
     */
    public static int IORING_REGISTER_RING_FDS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .IORING_UNREGISTER_RING_FDS = 21;
     * }
     */
    public static int IORING_UNREGISTER_RING_FDS() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_PBUF_RING = 22;
     * }
     */
    public static int IORING_REGISTER_PBUF_RING() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .IORING_UNREGISTER_PBUF_RING = 23;
     * }
     */
    public static int IORING_UNREGISTER_PBUF_RING() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_SYNC_CANCEL = 24;
     * }
     */
    public static int IORING_REGISTER_SYNC_CANCEL() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .IORING_REGISTER_FILE_ALLOC_RANGE = 25;
     * }
     */
    public static int IORING_REGISTER_FILE_ALLOC_RANGE() {
        return (int)25L;
    }
}


