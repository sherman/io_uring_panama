// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$30 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$30() {}
    static final FunctionDescriptor _Fork$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle _Fork$MH = RuntimeHelper.downcallHandle(
        "_Fork",
        constants$30._Fork$FUNC
    );
    static final FunctionDescriptor ttyname$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ttyname$MH = RuntimeHelper.downcallHandle(
        "ttyname",
        constants$30.ttyname$FUNC
    );
    static final FunctionDescriptor ttyname_r$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle ttyname_r$MH = RuntimeHelper.downcallHandle(
        "ttyname_r",
        constants$30.ttyname_r$FUNC
    );
    static final FunctionDescriptor isatty$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle isatty$MH = RuntimeHelper.downcallHandle(
        "isatty",
        constants$30.isatty$FUNC
    );
    static final FunctionDescriptor ttyslot$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle ttyslot$MH = RuntimeHelper.downcallHandle(
        "ttyslot",
        constants$30.ttyslot$FUNC
    );
    static final FunctionDescriptor link$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle link$MH = RuntimeHelper.downcallHandle(
        "link",
        constants$30.link$FUNC
    );
}


