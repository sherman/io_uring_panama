// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct sockaddr_storage {
 *     sa_family_t ss_family;
 *     char __ss_padding[118];
 *     unsigned long __ss_align;
 * };
 * }
 */
public class sockaddr_storage {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("ss_family"),
        MemoryLayout.sequenceLayout(118, Constants$root.C_CHAR$LAYOUT).withName("__ss_padding"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__ss_align")
    ).withName("sockaddr_storage");
    public static MemoryLayout $LAYOUT() {
        return sockaddr_storage.$struct$LAYOUT;
    }
    static final VarHandle ss_family$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ss_family"));
    public static VarHandle ss_family$VH() {
        return sockaddr_storage.ss_family$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * sa_family_t ss_family;
     * }
     */
    public static short ss_family$get(MemorySegment seg) {
        return (short)sockaddr_storage.ss_family$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * sa_family_t ss_family;
     * }
     */
    public static void ss_family$set(MemorySegment seg, short x) {
        sockaddr_storage.ss_family$VH.set(seg, x);
    }
    public static short ss_family$get(MemorySegment seg, long index) {
        return (short)sockaddr_storage.ss_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ss_family$set(MemorySegment seg, long index, short x) {
        sockaddr_storage.ss_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment __ss_padding$slice(MemorySegment seg) {
        return seg.asSlice(2, 118);
    }
    static final VarHandle __ss_align$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__ss_align"));
    public static VarHandle __ss_align$VH() {
        return sockaddr_storage.__ss_align$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long __ss_align;
     * }
     */
    public static long __ss_align$get(MemorySegment seg) {
        return (long)sockaddr_storage.__ss_align$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long __ss_align;
     * }
     */
    public static void __ss_align$set(MemorySegment seg, long x) {
        sockaddr_storage.__ss_align$VH.set(seg, x);
    }
    public static long __ss_align$get(MemorySegment seg, long index) {
        return (long)sockaddr_storage.__ss_align$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ss_align$set(MemorySegment seg, long index, long x) {
        sockaddr_storage.__ss_align$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


