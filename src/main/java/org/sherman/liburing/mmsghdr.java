// Generated by jextract

package org.sherman.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct mmsghdr {
 *     struct msghdr msg_hdr;
 *     unsigned int msg_len;
 * };
 * }
 */
public class mmsghdr {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("msg_name"),
            Constants$root.C_INT$LAYOUT.withName("msg_namelen"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("msg_iov"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("msg_iovlen"),
            Constants$root.C_POINTER$LAYOUT.withName("msg_control"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("msg_controllen"),
            Constants$root.C_INT$LAYOUT.withName("msg_flags"),
            MemoryLayout.paddingLayout(32)
        ).withName("msg_hdr"),
        Constants$root.C_INT$LAYOUT.withName("msg_len"),
        MemoryLayout.paddingLayout(32)
    ).withName("mmsghdr");
    public static MemoryLayout $LAYOUT() {
        return mmsghdr.$struct$LAYOUT;
    }
    public static MemorySegment msg_hdr$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    static final VarHandle msg_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg_len"));
    public static VarHandle msg_len$VH() {
        return mmsghdr.msg_len$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int msg_len;
     * }
     */
    public static int msg_len$get(MemorySegment seg) {
        return (int)mmsghdr.msg_len$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int msg_len;
     * }
     */
    public static void msg_len$set(MemorySegment seg, int x) {
        mmsghdr.msg_len$VH.set(seg, x);
    }
    public static int msg_len$get(MemorySegment seg, long index) {
        return (int)mmsghdr.msg_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg_len$set(MemorySegment seg, long index, int x) {
        mmsghdr.msg_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


