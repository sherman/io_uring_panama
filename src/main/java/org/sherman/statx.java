// Generated by jextract

package org.sherman;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct statx {
 *     __u32 stx_mask;
 *     __u32 stx_blksize;
 *     __u64 stx_attributes;
 *     __u32 stx_nlink;
 *     __u32 stx_uid;
 *     __u32 stx_gid;
 *     __u16 stx_mode;
 *     __u16 __spare0[1];
 *     __u64 stx_ino;
 *     __u64 stx_size;
 *     __u64 stx_blocks;
 *     __u64 stx_attributes_mask;
 *     struct statx_timestamp stx_atime;
 *     struct statx_timestamp stx_btime;
 *     struct statx_timestamp stx_ctime;
 *     struct statx_timestamp stx_mtime;
 *     __u32 stx_rdev_major;
 *     __u32 stx_rdev_minor;
 *     __u32 stx_dev_major;
 *     __u32 stx_dev_minor;
 *     __u64 stx_mnt_id;
 *     __u64 __spare2;
 *     __u64 __spare3[12];
 * };
 * }
 */
public class statx {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("stx_mask"),
        Constants$root.C_INT$LAYOUT.withName("stx_blksize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stx_attributes"),
        Constants$root.C_INT$LAYOUT.withName("stx_nlink"),
        Constants$root.C_INT$LAYOUT.withName("stx_uid"),
        Constants$root.C_INT$LAYOUT.withName("stx_gid"),
        Constants$root.C_SHORT$LAYOUT.withName("stx_mode"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_SHORT$LAYOUT).withName("__spare0"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stx_ino"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stx_size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stx_blocks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stx_attributes_mask"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_INT$LAYOUT.withName("tv_nsec"),
            Constants$root.C_INT$LAYOUT.withName("__reserved")
        ).withName("stx_atime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_INT$LAYOUT.withName("tv_nsec"),
            Constants$root.C_INT$LAYOUT.withName("__reserved")
        ).withName("stx_btime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_INT$LAYOUT.withName("tv_nsec"),
            Constants$root.C_INT$LAYOUT.withName("__reserved")
        ).withName("stx_ctime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_INT$LAYOUT.withName("tv_nsec"),
            Constants$root.C_INT$LAYOUT.withName("__reserved")
        ).withName("stx_mtime"),
        Constants$root.C_INT$LAYOUT.withName("stx_rdev_major"),
        Constants$root.C_INT$LAYOUT.withName("stx_rdev_minor"),
        Constants$root.C_INT$LAYOUT.withName("stx_dev_major"),
        Constants$root.C_INT$LAYOUT.withName("stx_dev_minor"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stx_mnt_id"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__spare2"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_LONG_LONG$LAYOUT).withName("__spare3")
    ).withName("statx");
    public static MemoryLayout $LAYOUT() {
        return statx.$struct$LAYOUT;
    }
    static final VarHandle stx_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_mask"));
    public static VarHandle stx_mask$VH() {
        return statx.stx_mask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_mask;
     * }
     */
    public static int stx_mask$get(MemorySegment seg) {
        return (int)statx.stx_mask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_mask;
     * }
     */
    public static void stx_mask$set(MemorySegment seg, int x) {
        statx.stx_mask$VH.set(seg, x);
    }
    public static int stx_mask$get(MemorySegment seg, long index) {
        return (int)statx.stx_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_mask$set(MemorySegment seg, long index, int x) {
        statx.stx_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_blksize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_blksize"));
    public static VarHandle stx_blksize$VH() {
        return statx.stx_blksize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_blksize;
     * }
     */
    public static int stx_blksize$get(MemorySegment seg) {
        return (int)statx.stx_blksize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_blksize;
     * }
     */
    public static void stx_blksize$set(MemorySegment seg, int x) {
        statx.stx_blksize$VH.set(seg, x);
    }
    public static int stx_blksize$get(MemorySegment seg, long index) {
        return (int)statx.stx_blksize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_blksize$set(MemorySegment seg, long index, int x) {
        statx.stx_blksize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_attributes"));
    public static VarHandle stx_attributes$VH() {
        return statx.stx_attributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 stx_attributes;
     * }
     */
    public static long stx_attributes$get(MemorySegment seg) {
        return (long)statx.stx_attributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 stx_attributes;
     * }
     */
    public static void stx_attributes$set(MemorySegment seg, long x) {
        statx.stx_attributes$VH.set(seg, x);
    }
    public static long stx_attributes$get(MemorySegment seg, long index) {
        return (long)statx.stx_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_attributes$set(MemorySegment seg, long index, long x) {
        statx.stx_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_nlink$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_nlink"));
    public static VarHandle stx_nlink$VH() {
        return statx.stx_nlink$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_nlink;
     * }
     */
    public static int stx_nlink$get(MemorySegment seg) {
        return (int)statx.stx_nlink$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_nlink;
     * }
     */
    public static void stx_nlink$set(MemorySegment seg, int x) {
        statx.stx_nlink$VH.set(seg, x);
    }
    public static int stx_nlink$get(MemorySegment seg, long index) {
        return (int)statx.stx_nlink$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_nlink$set(MemorySegment seg, long index, int x) {
        statx.stx_nlink$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_uid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_uid"));
    public static VarHandle stx_uid$VH() {
        return statx.stx_uid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_uid;
     * }
     */
    public static int stx_uid$get(MemorySegment seg) {
        return (int)statx.stx_uid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_uid;
     * }
     */
    public static void stx_uid$set(MemorySegment seg, int x) {
        statx.stx_uid$VH.set(seg, x);
    }
    public static int stx_uid$get(MemorySegment seg, long index) {
        return (int)statx.stx_uid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_uid$set(MemorySegment seg, long index, int x) {
        statx.stx_uid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_gid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_gid"));
    public static VarHandle stx_gid$VH() {
        return statx.stx_gid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_gid;
     * }
     */
    public static int stx_gid$get(MemorySegment seg) {
        return (int)statx.stx_gid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_gid;
     * }
     */
    public static void stx_gid$set(MemorySegment seg, int x) {
        statx.stx_gid$VH.set(seg, x);
    }
    public static int stx_gid$get(MemorySegment seg, long index) {
        return (int)statx.stx_gid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_gid$set(MemorySegment seg, long index, int x) {
        statx.stx_gid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_mode"));
    public static VarHandle stx_mode$VH() {
        return statx.stx_mode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u16 stx_mode;
     * }
     */
    public static short stx_mode$get(MemorySegment seg) {
        return (short)statx.stx_mode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u16 stx_mode;
     * }
     */
    public static void stx_mode$set(MemorySegment seg, short x) {
        statx.stx_mode$VH.set(seg, x);
    }
    public static short stx_mode$get(MemorySegment seg, long index) {
        return (short)statx.stx_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_mode$set(MemorySegment seg, long index, short x) {
        statx.stx_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment __spare0$slice(MemorySegment seg) {
        return seg.asSlice(30, 2);
    }
    static final VarHandle stx_ino$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_ino"));
    public static VarHandle stx_ino$VH() {
        return statx.stx_ino$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 stx_ino;
     * }
     */
    public static long stx_ino$get(MemorySegment seg) {
        return (long)statx.stx_ino$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 stx_ino;
     * }
     */
    public static void stx_ino$set(MemorySegment seg, long x) {
        statx.stx_ino$VH.set(seg, x);
    }
    public static long stx_ino$get(MemorySegment seg, long index) {
        return (long)statx.stx_ino$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_ino$set(MemorySegment seg, long index, long x) {
        statx.stx_ino$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_size"));
    public static VarHandle stx_size$VH() {
        return statx.stx_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 stx_size;
     * }
     */
    public static long stx_size$get(MemorySegment seg) {
        return (long)statx.stx_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 stx_size;
     * }
     */
    public static void stx_size$set(MemorySegment seg, long x) {
        statx.stx_size$VH.set(seg, x);
    }
    public static long stx_size$get(MemorySegment seg, long index) {
        return (long)statx.stx_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_size$set(MemorySegment seg, long index, long x) {
        statx.stx_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_blocks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_blocks"));
    public static VarHandle stx_blocks$VH() {
        return statx.stx_blocks$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 stx_blocks;
     * }
     */
    public static long stx_blocks$get(MemorySegment seg) {
        return (long)statx.stx_blocks$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 stx_blocks;
     * }
     */
    public static void stx_blocks$set(MemorySegment seg, long x) {
        statx.stx_blocks$VH.set(seg, x);
    }
    public static long stx_blocks$get(MemorySegment seg, long index) {
        return (long)statx.stx_blocks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_blocks$set(MemorySegment seg, long index, long x) {
        statx.stx_blocks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_attributes_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_attributes_mask"));
    public static VarHandle stx_attributes_mask$VH() {
        return statx.stx_attributes_mask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 stx_attributes_mask;
     * }
     */
    public static long stx_attributes_mask$get(MemorySegment seg) {
        return (long)statx.stx_attributes_mask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 stx_attributes_mask;
     * }
     */
    public static void stx_attributes_mask$set(MemorySegment seg, long x) {
        statx.stx_attributes_mask$VH.set(seg, x);
    }
    public static long stx_attributes_mask$get(MemorySegment seg, long index) {
        return (long)statx.stx_attributes_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_attributes_mask$set(MemorySegment seg, long index, long x) {
        statx.stx_attributes_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment stx_atime$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    public static MemorySegment stx_btime$slice(MemorySegment seg) {
        return seg.asSlice(80, 16);
    }
    public static MemorySegment stx_ctime$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }
    public static MemorySegment stx_mtime$slice(MemorySegment seg) {
        return seg.asSlice(112, 16);
    }
    static final VarHandle stx_rdev_major$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_rdev_major"));
    public static VarHandle stx_rdev_major$VH() {
        return statx.stx_rdev_major$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_rdev_major;
     * }
     */
    public static int stx_rdev_major$get(MemorySegment seg) {
        return (int)statx.stx_rdev_major$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_rdev_major;
     * }
     */
    public static void stx_rdev_major$set(MemorySegment seg, int x) {
        statx.stx_rdev_major$VH.set(seg, x);
    }
    public static int stx_rdev_major$get(MemorySegment seg, long index) {
        return (int)statx.stx_rdev_major$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_rdev_major$set(MemorySegment seg, long index, int x) {
        statx.stx_rdev_major$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_rdev_minor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_rdev_minor"));
    public static VarHandle stx_rdev_minor$VH() {
        return statx.stx_rdev_minor$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_rdev_minor;
     * }
     */
    public static int stx_rdev_minor$get(MemorySegment seg) {
        return (int)statx.stx_rdev_minor$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_rdev_minor;
     * }
     */
    public static void stx_rdev_minor$set(MemorySegment seg, int x) {
        statx.stx_rdev_minor$VH.set(seg, x);
    }
    public static int stx_rdev_minor$get(MemorySegment seg, long index) {
        return (int)statx.stx_rdev_minor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_rdev_minor$set(MemorySegment seg, long index, int x) {
        statx.stx_rdev_minor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_dev_major$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_dev_major"));
    public static VarHandle stx_dev_major$VH() {
        return statx.stx_dev_major$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_dev_major;
     * }
     */
    public static int stx_dev_major$get(MemorySegment seg) {
        return (int)statx.stx_dev_major$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_dev_major;
     * }
     */
    public static void stx_dev_major$set(MemorySegment seg, int x) {
        statx.stx_dev_major$VH.set(seg, x);
    }
    public static int stx_dev_major$get(MemorySegment seg, long index) {
        return (int)statx.stx_dev_major$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_dev_major$set(MemorySegment seg, long index, int x) {
        statx.stx_dev_major$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_dev_minor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_dev_minor"));
    public static VarHandle stx_dev_minor$VH() {
        return statx.stx_dev_minor$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 stx_dev_minor;
     * }
     */
    public static int stx_dev_minor$get(MemorySegment seg) {
        return (int)statx.stx_dev_minor$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 stx_dev_minor;
     * }
     */
    public static void stx_dev_minor$set(MemorySegment seg, int x) {
        statx.stx_dev_minor$VH.set(seg, x);
    }
    public static int stx_dev_minor$get(MemorySegment seg, long index) {
        return (int)statx.stx_dev_minor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_dev_minor$set(MemorySegment seg, long index, int x) {
        statx.stx_dev_minor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stx_mnt_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stx_mnt_id"));
    public static VarHandle stx_mnt_id$VH() {
        return statx.stx_mnt_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 stx_mnt_id;
     * }
     */
    public static long stx_mnt_id$get(MemorySegment seg) {
        return (long)statx.stx_mnt_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 stx_mnt_id;
     * }
     */
    public static void stx_mnt_id$set(MemorySegment seg, long x) {
        statx.stx_mnt_id$VH.set(seg, x);
    }
    public static long stx_mnt_id$get(MemorySegment seg, long index) {
        return (long)statx.stx_mnt_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stx_mnt_id$set(MemorySegment seg, long index, long x) {
        statx.stx_mnt_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __spare2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__spare2"));
    public static VarHandle __spare2$VH() {
        return statx.__spare2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 __spare2;
     * }
     */
    public static long __spare2$get(MemorySegment seg) {
        return (long)statx.__spare2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 __spare2;
     * }
     */
    public static void __spare2$set(MemorySegment seg, long x) {
        statx.__spare2$VH.set(seg, x);
    }
    public static long __spare2$get(MemorySegment seg, long index) {
        return (long)statx.__spare2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __spare2$set(MemorySegment seg, long index, long x) {
        statx.__spare2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment __spare3$slice(MemorySegment seg) {
        return seg.asSlice(160, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


