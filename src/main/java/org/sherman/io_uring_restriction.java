// Generated by jextract

package org.sherman;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct io_uring_restriction {
 *     __u16 opcode;
 *     union {
 *         __u8 register_op;
 *         __u8 sqe_op;
 *         __u8 sqe_flags;
 *     };
 *     __u8 resv;
 *     __u32 resv2[3];
 * };
 * }
 */
public class io_uring_restriction {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("opcode"),
        MemoryLayout.unionLayout(
            Constants$root.C_CHAR$LAYOUT.withName("register_op"),
            Constants$root.C_CHAR$LAYOUT.withName("sqe_op"),
            Constants$root.C_CHAR$LAYOUT.withName("sqe_flags")
        ).withName("$anon$0"),
        Constants$root.C_CHAR$LAYOUT.withName("resv"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_INT$LAYOUT).withName("resv2")
    ).withName("io_uring_restriction");
    public static MemoryLayout $LAYOUT() {
        return io_uring_restriction.$struct$LAYOUT;
    }
    static final VarHandle opcode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opcode"));
    public static VarHandle opcode$VH() {
        return io_uring_restriction.opcode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u16 opcode;
     * }
     */
    public static short opcode$get(MemorySegment seg) {
        return (short)io_uring_restriction.opcode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u16 opcode;
     * }
     */
    public static void opcode$set(MemorySegment seg, short x) {
        io_uring_restriction.opcode$VH.set(seg, x);
    }
    public static short opcode$get(MemorySegment seg, long index) {
        return (short)io_uring_restriction.opcode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opcode$set(MemorySegment seg, long index, short x) {
        io_uring_restriction.opcode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle register_op$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("register_op"));
    public static VarHandle register_op$VH() {
        return io_uring_restriction.register_op$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 register_op;
     * }
     */
    public static byte register_op$get(MemorySegment seg) {
        return (byte)io_uring_restriction.register_op$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 register_op;
     * }
     */
    public static void register_op$set(MemorySegment seg, byte x) {
        io_uring_restriction.register_op$VH.set(seg, x);
    }
    public static byte register_op$get(MemorySegment seg, long index) {
        return (byte)io_uring_restriction.register_op$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void register_op$set(MemorySegment seg, long index, byte x) {
        io_uring_restriction.register_op$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sqe_op$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("sqe_op"));
    public static VarHandle sqe_op$VH() {
        return io_uring_restriction.sqe_op$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 sqe_op;
     * }
     */
    public static byte sqe_op$get(MemorySegment seg) {
        return (byte)io_uring_restriction.sqe_op$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 sqe_op;
     * }
     */
    public static void sqe_op$set(MemorySegment seg, byte x) {
        io_uring_restriction.sqe_op$VH.set(seg, x);
    }
    public static byte sqe_op$get(MemorySegment seg, long index) {
        return (byte)io_uring_restriction.sqe_op$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sqe_op$set(MemorySegment seg, long index, byte x) {
        io_uring_restriction.sqe_op$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sqe_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("sqe_flags"));
    public static VarHandle sqe_flags$VH() {
        return io_uring_restriction.sqe_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 sqe_flags;
     * }
     */
    public static byte sqe_flags$get(MemorySegment seg) {
        return (byte)io_uring_restriction.sqe_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 sqe_flags;
     * }
     */
    public static void sqe_flags$set(MemorySegment seg, byte x) {
        io_uring_restriction.sqe_flags$VH.set(seg, x);
    }
    public static byte sqe_flags$get(MemorySegment seg, long index) {
        return (byte)io_uring_restriction.sqe_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sqe_flags$set(MemorySegment seg, long index, byte x) {
        io_uring_restriction.sqe_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resv"));
    public static VarHandle resv$VH() {
        return io_uring_restriction.resv$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 resv;
     * }
     */
    public static byte resv$get(MemorySegment seg) {
        return (byte)io_uring_restriction.resv$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 resv;
     * }
     */
    public static void resv$set(MemorySegment seg, byte x) {
        io_uring_restriction.resv$VH.set(seg, x);
    }
    public static byte resv$get(MemorySegment seg, long index) {
        return (byte)io_uring_restriction.resv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resv$set(MemorySegment seg, long index, byte x) {
        io_uring_restriction.resv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment resv2$slice(MemorySegment seg) {
        return seg.asSlice(4, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


