// Generated by jextract

package org.sherman;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct timex {
 *     unsigned int modes;
 *     __syscall_slong_t offset;
 *     __syscall_slong_t freq;
 *     __syscall_slong_t maxerror;
 *     __syscall_slong_t esterror;
 *     int status;
 *     __syscall_slong_t constant;
 *     __syscall_slong_t precision;
 *     __syscall_slong_t tolerance;
 *     struct timeval time;
 *     __syscall_slong_t tick;
 *     __syscall_slong_t ppsfreq;
 *     __syscall_slong_t jitter;
 *     int shift;
 *     __syscall_slong_t stabil;
 *     __syscall_slong_t jitcnt;
 *     __syscall_slong_t calcnt;
 *     __syscall_slong_t errcnt;
 *     __syscall_slong_t stbcnt;
 *     int tai;
 * };
 * }
 */
public class timex {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("modes"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("freq"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("maxerror"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("esterror"),
        Constants$root.C_INT$LAYOUT.withName("status"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("constant"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("precision"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("tolerance"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_sec"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("tv_usec")
        ).withName("time"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("tick"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ppsfreq"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("jitter"),
        Constants$root.C_INT$LAYOUT.withName("shift"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stabil"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("jitcnt"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("calcnt"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("errcnt"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("stbcnt"),
        Constants$root.C_INT$LAYOUT.withName("tai"),
        MemoryLayout.paddingLayout(352)
    ).withName("timex");
    public static MemoryLayout $LAYOUT() {
        return timex.$struct$LAYOUT;
    }
    static final VarHandle modes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("modes"));
    public static VarHandle modes$VH() {
        return timex.modes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int modes;
     * }
     */
    public static int modes$get(MemorySegment seg) {
        return (int)timex.modes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int modes;
     * }
     */
    public static void modes$set(MemorySegment seg, int x) {
        timex.modes$VH.set(seg, x);
    }
    public static int modes$get(MemorySegment seg, long index) {
        return (int)timex.modes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void modes$set(MemorySegment seg, long index, int x) {
        timex.modes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offset"));
    public static VarHandle offset$VH() {
        return timex.offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t offset;
     * }
     */
    public static long offset$get(MemorySegment seg) {
        return (long)timex.offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t offset;
     * }
     */
    public static void offset$set(MemorySegment seg, long x) {
        timex.offset$VH.set(seg, x);
    }
    public static long offset$get(MemorySegment seg, long index) {
        return (long)timex.offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, long x) {
        timex.offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle freq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("freq"));
    public static VarHandle freq$VH() {
        return timex.freq$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t freq;
     * }
     */
    public static long freq$get(MemorySegment seg) {
        return (long)timex.freq$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t freq;
     * }
     */
    public static void freq$set(MemorySegment seg, long x) {
        timex.freq$VH.set(seg, x);
    }
    public static long freq$get(MemorySegment seg, long index) {
        return (long)timex.freq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void freq$set(MemorySegment seg, long index, long x) {
        timex.freq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maxerror$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maxerror"));
    public static VarHandle maxerror$VH() {
        return timex.maxerror$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t maxerror;
     * }
     */
    public static long maxerror$get(MemorySegment seg) {
        return (long)timex.maxerror$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t maxerror;
     * }
     */
    public static void maxerror$set(MemorySegment seg, long x) {
        timex.maxerror$VH.set(seg, x);
    }
    public static long maxerror$get(MemorySegment seg, long index) {
        return (long)timex.maxerror$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maxerror$set(MemorySegment seg, long index, long x) {
        timex.maxerror$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle esterror$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("esterror"));
    public static VarHandle esterror$VH() {
        return timex.esterror$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t esterror;
     * }
     */
    public static long esterror$get(MemorySegment seg) {
        return (long)timex.esterror$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t esterror;
     * }
     */
    public static void esterror$set(MemorySegment seg, long x) {
        timex.esterror$VH.set(seg, x);
    }
    public static long esterror$get(MemorySegment seg, long index) {
        return (long)timex.esterror$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void esterror$set(MemorySegment seg, long index, long x) {
        timex.esterror$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle status$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("status"));
    public static VarHandle status$VH() {
        return timex.status$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int status;
     * }
     */
    public static int status$get(MemorySegment seg) {
        return (int)timex.status$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int status;
     * }
     */
    public static void status$set(MemorySegment seg, int x) {
        timex.status$VH.set(seg, x);
    }
    public static int status$get(MemorySegment seg, long index) {
        return (int)timex.status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void status$set(MemorySegment seg, long index, int x) {
        timex.status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle constant$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("constant"));
    public static VarHandle constant$VH() {
        return timex.constant$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t constant;
     * }
     */
    public static long constant$get(MemorySegment seg) {
        return (long)timex.constant$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t constant;
     * }
     */
    public static void constant$set(MemorySegment seg, long x) {
        timex.constant$VH.set(seg, x);
    }
    public static long constant$get(MemorySegment seg, long index) {
        return (long)timex.constant$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void constant$set(MemorySegment seg, long index, long x) {
        timex.constant$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle precision$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("precision"));
    public static VarHandle precision$VH() {
        return timex.precision$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t precision;
     * }
     */
    public static long precision$get(MemorySegment seg) {
        return (long)timex.precision$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t precision;
     * }
     */
    public static void precision$set(MemorySegment seg, long x) {
        timex.precision$VH.set(seg, x);
    }
    public static long precision$get(MemorySegment seg, long index) {
        return (long)timex.precision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void precision$set(MemorySegment seg, long index, long x) {
        timex.precision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tolerance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tolerance"));
    public static VarHandle tolerance$VH() {
        return timex.tolerance$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t tolerance;
     * }
     */
    public static long tolerance$get(MemorySegment seg) {
        return (long)timex.tolerance$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t tolerance;
     * }
     */
    public static void tolerance$set(MemorySegment seg, long x) {
        timex.tolerance$VH.set(seg, x);
    }
    public static long tolerance$get(MemorySegment seg, long index) {
        return (long)timex.tolerance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tolerance$set(MemorySegment seg, long index, long x) {
        timex.tolerance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment time$slice(MemorySegment seg) {
        return seg.asSlice(72, 16);
    }
    static final VarHandle tick$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tick"));
    public static VarHandle tick$VH() {
        return timex.tick$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t tick;
     * }
     */
    public static long tick$get(MemorySegment seg) {
        return (long)timex.tick$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t tick;
     * }
     */
    public static void tick$set(MemorySegment seg, long x) {
        timex.tick$VH.set(seg, x);
    }
    public static long tick$get(MemorySegment seg, long index) {
        return (long)timex.tick$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tick$set(MemorySegment seg, long index, long x) {
        timex.tick$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ppsfreq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ppsfreq"));
    public static VarHandle ppsfreq$VH() {
        return timex.ppsfreq$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t ppsfreq;
     * }
     */
    public static long ppsfreq$get(MemorySegment seg) {
        return (long)timex.ppsfreq$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t ppsfreq;
     * }
     */
    public static void ppsfreq$set(MemorySegment seg, long x) {
        timex.ppsfreq$VH.set(seg, x);
    }
    public static long ppsfreq$get(MemorySegment seg, long index) {
        return (long)timex.ppsfreq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppsfreq$set(MemorySegment seg, long index, long x) {
        timex.ppsfreq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle jitter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("jitter"));
    public static VarHandle jitter$VH() {
        return timex.jitter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t jitter;
     * }
     */
    public static long jitter$get(MemorySegment seg) {
        return (long)timex.jitter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t jitter;
     * }
     */
    public static void jitter$set(MemorySegment seg, long x) {
        timex.jitter$VH.set(seg, x);
    }
    public static long jitter$get(MemorySegment seg, long index) {
        return (long)timex.jitter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void jitter$set(MemorySegment seg, long index, long x) {
        timex.jitter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle shift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("shift"));
    public static VarHandle shift$VH() {
        return timex.shift$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int shift;
     * }
     */
    public static int shift$get(MemorySegment seg) {
        return (int)timex.shift$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int shift;
     * }
     */
    public static void shift$set(MemorySegment seg, int x) {
        timex.shift$VH.set(seg, x);
    }
    public static int shift$get(MemorySegment seg, long index) {
        return (int)timex.shift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shift$set(MemorySegment seg, long index, int x) {
        timex.shift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stabil$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stabil"));
    public static VarHandle stabil$VH() {
        return timex.stabil$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t stabil;
     * }
     */
    public static long stabil$get(MemorySegment seg) {
        return (long)timex.stabil$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t stabil;
     * }
     */
    public static void stabil$set(MemorySegment seg, long x) {
        timex.stabil$VH.set(seg, x);
    }
    public static long stabil$get(MemorySegment seg, long index) {
        return (long)timex.stabil$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stabil$set(MemorySegment seg, long index, long x) {
        timex.stabil$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle jitcnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("jitcnt"));
    public static VarHandle jitcnt$VH() {
        return timex.jitcnt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t jitcnt;
     * }
     */
    public static long jitcnt$get(MemorySegment seg) {
        return (long)timex.jitcnt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t jitcnt;
     * }
     */
    public static void jitcnt$set(MemorySegment seg, long x) {
        timex.jitcnt$VH.set(seg, x);
    }
    public static long jitcnt$get(MemorySegment seg, long index) {
        return (long)timex.jitcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void jitcnt$set(MemorySegment seg, long index, long x) {
        timex.jitcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle calcnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("calcnt"));
    public static VarHandle calcnt$VH() {
        return timex.calcnt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t calcnt;
     * }
     */
    public static long calcnt$get(MemorySegment seg) {
        return (long)timex.calcnt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t calcnt;
     * }
     */
    public static void calcnt$set(MemorySegment seg, long x) {
        timex.calcnt$VH.set(seg, x);
    }
    public static long calcnt$get(MemorySegment seg, long index) {
        return (long)timex.calcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void calcnt$set(MemorySegment seg, long index, long x) {
        timex.calcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle errcnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("errcnt"));
    public static VarHandle errcnt$VH() {
        return timex.errcnt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t errcnt;
     * }
     */
    public static long errcnt$get(MemorySegment seg) {
        return (long)timex.errcnt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t errcnt;
     * }
     */
    public static void errcnt$set(MemorySegment seg, long x) {
        timex.errcnt$VH.set(seg, x);
    }
    public static long errcnt$get(MemorySegment seg, long index) {
        return (long)timex.errcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void errcnt$set(MemorySegment seg, long index, long x) {
        timex.errcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stbcnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stbcnt"));
    public static VarHandle stbcnt$VH() {
        return timex.stbcnt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __syscall_slong_t stbcnt;
     * }
     */
    public static long stbcnt$get(MemorySegment seg) {
        return (long)timex.stbcnt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __syscall_slong_t stbcnt;
     * }
     */
    public static void stbcnt$set(MemorySegment seg, long x) {
        timex.stbcnt$VH.set(seg, x);
    }
    public static long stbcnt$get(MemorySegment seg, long index) {
        return (long)timex.stbcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stbcnt$set(MemorySegment seg, long index, long x) {
        timex.stbcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tai$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tai"));
    public static VarHandle tai$VH() {
        return timex.tai$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tai;
     * }
     */
    public static int tai$get(MemorySegment seg) {
        return (int)timex.tai$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tai;
     * }
     */
    public static void tai$set(MemorySegment seg, int x) {
        timex.tai$VH.set(seg, x);
    }
    public static int tai$get(MemorySegment seg, long index) {
        return (int)timex.tai$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tai$set(MemorySegment seg, long index, int x) {
        timex.tai$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


