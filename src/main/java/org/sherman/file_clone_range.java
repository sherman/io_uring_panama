// Generated by jextract

package org.sherman;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct file_clone_range {
 *     __s64 src_fd;
 *     __u64 src_offset;
 *     __u64 src_length;
 *     __u64 dest_offset;
 * };
 * }
 */
public class file_clone_range {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("src_fd"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("src_offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("src_length"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dest_offset")
    ).withName("file_clone_range");
    public static MemoryLayout $LAYOUT() {
        return file_clone_range.$struct$LAYOUT;
    }
    static final VarHandle src_fd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("src_fd"));
    public static VarHandle src_fd$VH() {
        return file_clone_range.src_fd$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __s64 src_fd;
     * }
     */
    public static long src_fd$get(MemorySegment seg) {
        return (long)file_clone_range.src_fd$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __s64 src_fd;
     * }
     */
    public static void src_fd$set(MemorySegment seg, long x) {
        file_clone_range.src_fd$VH.set(seg, x);
    }
    public static long src_fd$get(MemorySegment seg, long index) {
        return (long)file_clone_range.src_fd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void src_fd$set(MemorySegment seg, long index, long x) {
        file_clone_range.src_fd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle src_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("src_offset"));
    public static VarHandle src_offset$VH() {
        return file_clone_range.src_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 src_offset;
     * }
     */
    public static long src_offset$get(MemorySegment seg) {
        return (long)file_clone_range.src_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 src_offset;
     * }
     */
    public static void src_offset$set(MemorySegment seg, long x) {
        file_clone_range.src_offset$VH.set(seg, x);
    }
    public static long src_offset$get(MemorySegment seg, long index) {
        return (long)file_clone_range.src_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void src_offset$set(MemorySegment seg, long index, long x) {
        file_clone_range.src_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle src_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("src_length"));
    public static VarHandle src_length$VH() {
        return file_clone_range.src_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 src_length;
     * }
     */
    public static long src_length$get(MemorySegment seg) {
        return (long)file_clone_range.src_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 src_length;
     * }
     */
    public static void src_length$set(MemorySegment seg, long x) {
        file_clone_range.src_length$VH.set(seg, x);
    }
    public static long src_length$get(MemorySegment seg, long index) {
        return (long)file_clone_range.src_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void src_length$set(MemorySegment seg, long index, long x) {
        file_clone_range.src_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dest_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dest_offset"));
    public static VarHandle dest_offset$VH() {
        return file_clone_range.dest_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u64 dest_offset;
     * }
     */
    public static long dest_offset$get(MemorySegment seg) {
        return (long)file_clone_range.dest_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u64 dest_offset;
     * }
     */
    public static void dest_offset$set(MemorySegment seg, long x) {
        file_clone_range.dest_offset$VH.set(seg, x);
    }
    public static long dest_offset$get(MemorySegment seg, long index) {
        return (long)file_clone_range.dest_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dest_offset$set(MemorySegment seg, long index, long x) {
        file_clone_range.dest_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


