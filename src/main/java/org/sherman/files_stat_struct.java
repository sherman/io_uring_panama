// Generated by jextract

package org.sherman;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct files_stat_struct {
 *     unsigned long nr_files;
 *     unsigned long nr_free_files;
 *     unsigned long max_files;
 * };
 * }
 */
public class files_stat_struct {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("nr_files"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nr_free_files"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("max_files")
    ).withName("files_stat_struct");
    public static MemoryLayout $LAYOUT() {
        return files_stat_struct.$struct$LAYOUT;
    }
    static final VarHandle nr_files$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nr_files"));
    public static VarHandle nr_files$VH() {
        return files_stat_struct.nr_files$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long nr_files;
     * }
     */
    public static long nr_files$get(MemorySegment seg) {
        return (long)files_stat_struct.nr_files$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long nr_files;
     * }
     */
    public static void nr_files$set(MemorySegment seg, long x) {
        files_stat_struct.nr_files$VH.set(seg, x);
    }
    public static long nr_files$get(MemorySegment seg, long index) {
        return (long)files_stat_struct.nr_files$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nr_files$set(MemorySegment seg, long index, long x) {
        files_stat_struct.nr_files$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nr_free_files$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nr_free_files"));
    public static VarHandle nr_free_files$VH() {
        return files_stat_struct.nr_free_files$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long nr_free_files;
     * }
     */
    public static long nr_free_files$get(MemorySegment seg) {
        return (long)files_stat_struct.nr_free_files$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long nr_free_files;
     * }
     */
    public static void nr_free_files$set(MemorySegment seg, long x) {
        files_stat_struct.nr_free_files$VH.set(seg, x);
    }
    public static long nr_free_files$get(MemorySegment seg, long index) {
        return (long)files_stat_struct.nr_free_files$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nr_free_files$set(MemorySegment seg, long index, long x) {
        files_stat_struct.nr_free_files$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_files$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_files"));
    public static VarHandle max_files$VH() {
        return files_stat_struct.max_files$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long max_files;
     * }
     */
    public static long max_files$get(MemorySegment seg) {
        return (long)files_stat_struct.max_files$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long max_files;
     * }
     */
    public static void max_files$set(MemorySegment seg, long x) {
        files_stat_struct.max_files$VH.set(seg, x);
    }
    public static long max_files$get(MemorySegment seg, long index) {
        return (long)files_stat_struct.max_files$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_files$set(MemorySegment seg, long index, long x) {
        files_stat_struct.max_files$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


