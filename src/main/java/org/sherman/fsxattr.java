// Generated by jextract

package org.sherman;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fsxattr {
 *     __u32 fsx_xflags;
 *     __u32 fsx_extsize;
 *     __u32 fsx_nextents;
 *     __u32 fsx_projid;
 *     __u32 fsx_cowextsize;
 *     unsigned char fsx_pad[8];
 * };
 * }
 */
public class fsxattr {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("fsx_xflags"),
        Constants$root.C_INT$LAYOUT.withName("fsx_extsize"),
        Constants$root.C_INT$LAYOUT.withName("fsx_nextents"),
        Constants$root.C_INT$LAYOUT.withName("fsx_projid"),
        Constants$root.C_INT$LAYOUT.withName("fsx_cowextsize"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("fsx_pad")
    ).withName("fsxattr");
    public static MemoryLayout $LAYOUT() {
        return fsxattr.$struct$LAYOUT;
    }
    static final VarHandle fsx_xflags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fsx_xflags"));
    public static VarHandle fsx_xflags$VH() {
        return fsxattr.fsx_xflags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 fsx_xflags;
     * }
     */
    public static int fsx_xflags$get(MemorySegment seg) {
        return (int)fsxattr.fsx_xflags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 fsx_xflags;
     * }
     */
    public static void fsx_xflags$set(MemorySegment seg, int x) {
        fsxattr.fsx_xflags$VH.set(seg, x);
    }
    public static int fsx_xflags$get(MemorySegment seg, long index) {
        return (int)fsxattr.fsx_xflags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fsx_xflags$set(MemorySegment seg, long index, int x) {
        fsxattr.fsx_xflags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fsx_extsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fsx_extsize"));
    public static VarHandle fsx_extsize$VH() {
        return fsxattr.fsx_extsize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 fsx_extsize;
     * }
     */
    public static int fsx_extsize$get(MemorySegment seg) {
        return (int)fsxattr.fsx_extsize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 fsx_extsize;
     * }
     */
    public static void fsx_extsize$set(MemorySegment seg, int x) {
        fsxattr.fsx_extsize$VH.set(seg, x);
    }
    public static int fsx_extsize$get(MemorySegment seg, long index) {
        return (int)fsxattr.fsx_extsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fsx_extsize$set(MemorySegment seg, long index, int x) {
        fsxattr.fsx_extsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fsx_nextents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fsx_nextents"));
    public static VarHandle fsx_nextents$VH() {
        return fsxattr.fsx_nextents$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 fsx_nextents;
     * }
     */
    public static int fsx_nextents$get(MemorySegment seg) {
        return (int)fsxattr.fsx_nextents$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 fsx_nextents;
     * }
     */
    public static void fsx_nextents$set(MemorySegment seg, int x) {
        fsxattr.fsx_nextents$VH.set(seg, x);
    }
    public static int fsx_nextents$get(MemorySegment seg, long index) {
        return (int)fsxattr.fsx_nextents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fsx_nextents$set(MemorySegment seg, long index, int x) {
        fsxattr.fsx_nextents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fsx_projid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fsx_projid"));
    public static VarHandle fsx_projid$VH() {
        return fsxattr.fsx_projid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 fsx_projid;
     * }
     */
    public static int fsx_projid$get(MemorySegment seg) {
        return (int)fsxattr.fsx_projid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 fsx_projid;
     * }
     */
    public static void fsx_projid$set(MemorySegment seg, int x) {
        fsxattr.fsx_projid$VH.set(seg, x);
    }
    public static int fsx_projid$get(MemorySegment seg, long index) {
        return (int)fsxattr.fsx_projid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fsx_projid$set(MemorySegment seg, long index, int x) {
        fsxattr.fsx_projid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fsx_cowextsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fsx_cowextsize"));
    public static VarHandle fsx_cowextsize$VH() {
        return fsxattr.fsx_cowextsize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 fsx_cowextsize;
     * }
     */
    public static int fsx_cowextsize$get(MemorySegment seg) {
        return (int)fsxattr.fsx_cowextsize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 fsx_cowextsize;
     * }
     */
    public static void fsx_cowextsize$set(MemorySegment seg, int x) {
        fsxattr.fsx_cowextsize$VH.set(seg, x);
    }
    public static int fsx_cowextsize$get(MemorySegment seg, long index) {
        return (int)fsxattr.fsx_cowextsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fsx_cowextsize$set(MemorySegment seg, long index, int x) {
        fsxattr.fsx_cowextsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment fsx_pad$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


